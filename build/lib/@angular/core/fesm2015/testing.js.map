{"version":3,"file":"testing.js","sources":["../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/src/async.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/src/component_fixture.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/src/fake_async.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/src/async_test_completer.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/src/test_compiler.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/src/test_bed.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/src/before_each.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/src/private_export_testing.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/src/render3.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/src/testing.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/public_api.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/index.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/core/npm_package.es6/packages/core/testing/testing.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst /** @type {?} */ _global = /** @type {?} */ ((typeof window === 'undefined' ? global : window));\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {\\@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * \\@stable\n * @param {?} fn\n * @return {?}\n */\nexport function async(fn) {\n    // If we're running using the Jasmine test framework, adapt to call the 'done'\n    // function when asynchronous activity is finished.\n    if (_global.jasmine) {\n        // Not using an arrow function to preserve context passed from call site\n        return function (done) {\n            if (!done) {\n                // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                // fake it here and assume sync.\n                done = function () { };\n                done.fail = function (e) { throw e; };\n            }\n            runInTestZone(fn, this, done, (err) => {\n                if (typeof err === 'string') {\n                    return done.fail(new Error(/** @type {?} */ (err)));\n                }\n                else {\n                    done.fail(err);\n                }\n            });\n        };\n    }\n    // Otherwise, return a promise which will resolve when asynchronous activity\n    // is finished. This will be correctly consumed by the Mocha framework with\n    // it('...', async(myFn)); or can be used in a custom framework.\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        return new Promise((finishCallback, failCallback) => {\n            runInTestZone(fn, this, finishCallback, failCallback);\n        });\n    };\n}\n/**\n * @param {?} fn\n * @param {?} context\n * @param {?} finishCallback\n * @param {?} failCallback\n * @return {?}\n */\nfunction runInTestZone(fn, context, finishCallback, failCallback) {\n    const /** @type {?} */ currentZone = Zone.current;\n    const /** @type {?} */ AsyncTestZoneSpec = (/** @type {?} */ (Zone))['AsyncTestZoneSpec'];\n    if (AsyncTestZoneSpec === undefined) {\n        throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/async-test.js');\n    }\n    const /** @type {?} */ ProxyZoneSpec = /** @type {?} */ ((/** @type {?} */ (Zone))['ProxyZoneSpec']);\n    if (ProxyZoneSpec === undefined) {\n        throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/proxy.js');\n    }\n    const /** @type {?} */ proxyZoneSpec = ProxyZoneSpec.get();\n    ProxyZoneSpec.assertPresent();\n    // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n    // If we do it in ProxyZone then we will get to infinite recursion.\n    const /** @type {?} */ proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n    const /** @type {?} */ previousDelegate = proxyZoneSpec.getDelegate();\n    proxyZone.parent.run(() => {\n        const /** @type {?} */ testZoneSpec = new AsyncTestZoneSpec(() => {\n            // Need to restore the original zone.\n            currentZone.run(() => {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                finishCallback();\n            });\n        }, (error) => {\n            // Need to restore the original zone.\n            currentZone.run(() => {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                failCallback(error);\n            });\n        }, 'test');\n        proxyZoneSpec.setDelegate(testZoneSpec);\n    });\n    return Zone.current.runGuarded(fn, context);\n}\n\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { RendererFactory2, getDebugNode } from '@angular/core';\n/**\n * Fixture for debugging and testing a component.\n *\n * \\@stable\n * @template T\n */\nexport class ComponentFixture {\n    /**\n     * @param {?} componentRef\n     * @param {?} ngZone\n     * @param {?} _autoDetect\n     */\n    constructor(componentRef, ngZone, _autoDetect) {\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        this._autoDetect = _autoDetect;\n        this._isStable = true;\n        this._isDestroyed = false;\n        this._resolve = null;\n        this._promise = null;\n        this._onUnstableSubscription = null;\n        this._onStableSubscription = null;\n        this._onMicrotaskEmptySubscription = null;\n        this._onErrorSubscription = null;\n        this.changeDetectorRef = componentRef.changeDetectorRef;\n        this.elementRef = componentRef.location;\n        this.debugElement = /** @type {?} */ (getDebugNode(this.elementRef.nativeElement));\n        this.componentInstance = componentRef.instance;\n        this.nativeElement = this.elementRef.nativeElement;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        if (ngZone) {\n            // Create subscriptions outside the NgZone so that the callbacks run oustide\n            // of NgZone.\n            ngZone.runOutsideAngular(() => {\n                this._onUnstableSubscription =\n                    ngZone.onUnstable.subscribe({ next: () => { this._isStable = false; } });\n                this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                    next: () => {\n                        if (this._autoDetect) {\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            this.detectChanges(true);\n                        }\n                    }\n                });\n                this._onStableSubscription = ngZone.onStable.subscribe({\n                    next: () => {\n                        this._isStable = true;\n                        // Check whether there is a pending whenStable() completer to resolve.\n                        if (this._promise !== null) {\n                            // If so check whether there are no pending macrotasks before resolving.\n                            // Do this check in the next tick so that ngZone gets a chance to update the state of\n                            // pending macrotasks.\n                            scheduleMicroTask(() => {\n                                if (!ngZone.hasPendingMacrotasks) {\n                                    if (this._promise !== null) {\n                                        /** @type {?} */ ((this._resolve))(true);\n                                        this._resolve = null;\n                                        this._promise = null;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                this._onErrorSubscription =\n                    ngZone.onError.subscribe({ next: (error) => { throw error; } });\n            });\n        }\n    }\n    /**\n     * @param {?} checkNoChanges\n     * @return {?}\n     */\n    _tick(checkNoChanges) {\n        this.changeDetectorRef.detectChanges();\n        if (checkNoChanges) {\n            this.checkNoChanges();\n        }\n    }\n    /**\n     * Trigger a change detection cycle for the component.\n     * @param {?=} checkNoChanges\n     * @return {?}\n     */\n    detectChanges(checkNoChanges = true) {\n        if (this.ngZone != null) {\n            // Run the change detection inside the NgZone so that any async tasks as part of the change\n            // detection are captured by the zone and can be waited for in isStable.\n            this.ngZone.run(() => { this._tick(checkNoChanges); });\n        }\n        else {\n            // Running without zone. Just do the change detection.\n            this._tick(checkNoChanges);\n        }\n    }\n    /**\n     * Do a change detection run to make sure there were no changes.\n     * @return {?}\n     */\n    checkNoChanges() { this.changeDetectorRef.checkNoChanges(); }\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     * @param {?=} autoDetect\n     * @return {?}\n     */\n    autoDetectChanges(autoDetect = true) {\n        if (this.ngZone == null) {\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n        }\n        this._autoDetect = autoDetect;\n        this.detectChanges();\n    }\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     * @return {?}\n     */\n    isStable() { return this._isStable && !/** @type {?} */ ((this.ngZone)).hasPendingMacrotasks; }\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     * @return {?}\n     */\n    whenStable() {\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        else if (this._promise !== null) {\n            return this._promise;\n        }\n        else {\n            this._promise = new Promise(res => { this._resolve = res; });\n            return this._promise;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _getRenderer() {\n        if (this._renderer === undefined) {\n            this._renderer = this.componentRef.injector.get(RendererFactory2, null);\n        }\n        return /** @type {?} */ (this._renderer);\n    }\n    /**\n     * Get a promise that resolves when the ui state is stable following animations.\n     * @return {?}\n     */\n    whenRenderingDone() {\n        const /** @type {?} */ renderer = this._getRenderer();\n        if (renderer && renderer.whenRenderingDone) {\n            return renderer.whenRenderingDone();\n        }\n        return this.whenStable();\n    }\n    /**\n     * Trigger component destruction.\n     * @return {?}\n     */\n    destroy() {\n        if (!this._isDestroyed) {\n            this.componentRef.destroy();\n            if (this._onUnstableSubscription != null) {\n                this._onUnstableSubscription.unsubscribe();\n                this._onUnstableSubscription = null;\n            }\n            if (this._onStableSubscription != null) {\n                this._onStableSubscription.unsubscribe();\n                this._onStableSubscription = null;\n            }\n            if (this._onMicrotaskEmptySubscription != null) {\n                this._onMicrotaskEmptySubscription.unsubscribe();\n                this._onMicrotaskEmptySubscription = null;\n            }\n            if (this._onErrorSubscription != null) {\n                this._onErrorSubscription.unsubscribe();\n                this._onErrorSubscription = null;\n            }\n            this._isDestroyed = true;\n        }\n    }\n}\nfunction ComponentFixture_tsickle_Closure_declarations() {\n    /**\n     * The DebugElement associated with the root element of this component.\n     * @type {?}\n     */\n    ComponentFixture.prototype.debugElement;\n    /**\n     * The instance of the root component class.\n     * @type {?}\n     */\n    ComponentFixture.prototype.componentInstance;\n    /**\n     * The native element at the root of the component.\n     * @type {?}\n     */\n    ComponentFixture.prototype.nativeElement;\n    /**\n     * The ElementRef for the element at the root of the component.\n     * @type {?}\n     */\n    ComponentFixture.prototype.elementRef;\n    /**\n     * The ChangeDetectorRef for the component\n     * @type {?}\n     */\n    ComponentFixture.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentFixture.prototype._renderer;\n    /** @type {?} */\n    ComponentFixture.prototype._isStable;\n    /** @type {?} */\n    ComponentFixture.prototype._isDestroyed;\n    /** @type {?} */\n    ComponentFixture.prototype._resolve;\n    /** @type {?} */\n    ComponentFixture.prototype._promise;\n    /** @type {?} */\n    ComponentFixture.prototype._onUnstableSubscription;\n    /** @type {?} */\n    ComponentFixture.prototype._onStableSubscription;\n    /** @type {?} */\n    ComponentFixture.prototype._onMicrotaskEmptySubscription;\n    /** @type {?} */\n    ComponentFixture.prototype._onErrorSubscription;\n    /** @type {?} */\n    ComponentFixture.prototype.componentRef;\n    /** @type {?} */\n    ComponentFixture.prototype.ngZone;\n    /** @type {?} */\n    ComponentFixture.prototype._autoDetect;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst /** @type {?} */ _Zone = typeof Zone !== 'undefined' ? Zone : null;\nconst /** @type {?} */ FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\nconst /** @type {?} */ ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\nlet /** @type {?} */ _fakeAsyncTestZoneSpec = null;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * \\@experimental\n * @return {?}\n */\nexport function resetFakeAsyncZone() {\n    _fakeAsyncTestZoneSpec = null;\n    // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n    ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n}\nlet /** @type {?} */ _inFakeAsyncCall = false;\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * ## Example\n *\n * {\\@example core/testing/ts/fake_async.ts region='basic'}\n *\n * \\@experimental\n * @param {?} fn\n * @return {?} The function wrapped to be executed in the fakeAsync zone\n *\n */\nexport function fakeAsync(fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function (...args) {\n        const /** @type {?} */ proxyZoneSpec = ProxyZoneSpec.assertPresent();\n        if (_inFakeAsyncCall) {\n            throw new Error('fakeAsync() calls can not be nested');\n        }\n        _inFakeAsyncCall = true;\n        try {\n            if (!_fakeAsyncTestZoneSpec) {\n                if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                    throw new Error('fakeAsync() calls can not be nested');\n                }\n                _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n            }\n            let /** @type {?} */ res;\n            const /** @type {?} */ lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n            proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n            try {\n                res = fn.apply(this, args);\n                flushMicrotasks();\n            }\n            finally {\n                proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n            }\n            if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                throw new Error(`${_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length} ` +\n                    `periodic timer(s) still in the queue.`);\n            }\n            if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                throw new Error(`${_fakeAsyncTestZoneSpec.pendingTimers.length} timer(s) still in the queue.`);\n            }\n            return res;\n        }\n        finally {\n            _inFakeAsyncCall = false;\n            resetFakeAsyncZone();\n        }\n    };\n}\n/**\n * @return {?}\n */\nfunction _getFakeAsyncZoneSpec() {\n    if (_fakeAsyncTestZoneSpec == null) {\n        throw new Error('The code should be running in the fakeAsync zone to call this function');\n    }\n    return _fakeAsyncTestZoneSpec;\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * ## Example\n *\n * {\\@example core/testing/ts/fake_async.ts region='basic'}\n *\n * \\@experimental\n * @param {?=} millis\n * @return {?}\n */\nexport function tick(millis = 0) {\n    _getFakeAsyncZoneSpec().tick(millis);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * \\@experimental\n * @param {?=} maxTurns\n * @return {?} The simulated time elapsed, in millis.\n *\n */\nexport function flush(maxTurns) {\n    return _getFakeAsyncZoneSpec().flush(maxTurns);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * \\@experimental\n * @return {?}\n */\nexport function discardPeriodicTasks() {\n    const /** @type {?} */ zoneSpec = _getFakeAsyncZoneSpec();\n    const /** @type {?} */ pendingTimers = zoneSpec.pendingPeriodicTimers;\n    zoneSpec.pendingPeriodicTimers.length = 0;\n}\n/**\n * Flush any pending microtasks.\n *\n * \\@experimental\n * @return {?}\n */\nexport function flushMicrotasks() {\n    _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nexport class AsyncTestCompleter {\n    constructor() {\n        this._promise = new Promise((res, rej) => {\n            this._resolve = res;\n            this._reject = rej;\n        });\n    }\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    done(value) { this._resolve(value); }\n    /**\n     * @param {?=} error\n     * @param {?=} stackTrace\n     * @return {?}\n     */\n    fail(error, stackTrace) { this._reject(error); }\n    /**\n     * @return {?}\n     */\n    get promise() { return this._promise; }\n}\nfunction AsyncTestCompleter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AsyncTestCompleter.prototype._resolve;\n    /** @type {?} */\n    AsyncTestCompleter.prototype._reject;\n    /** @type {?} */\n    AsyncTestCompleter.prototype._promise;\n}\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmNfdGVzdF9jb21wbGV0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3Rlc3Rpbmcvc3JjL2FzeW5jX3Rlc3RfY29tcGxldGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBV0EsTUFBTTs7d0JBRzZCLElBQUksT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ3hELElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1NBQ3BCLENBQUM7Ozs7OztJQUNGLElBQUksQ0FBQyxLQUFXLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFOzs7Ozs7SUFFM0MsSUFBSSxDQUFDLEtBQVcsRUFBRSxVQUFtQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTs7OztJQUUvRCxJQUFJLE9BQU8sS0FBbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtDQUN0RCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBJbmplY3RhYmxlIGNvbXBsZXRlciB0aGF0IGFsbG93cyBzaWduYWxpbmcgY29tcGxldGlvbiBvZiBhbiBhc3luY2hyb25vdXMgdGVzdC4gVXNlZCBpbnRlcm5hbGx5LlxuICovXG5leHBvcnQgY2xhc3MgQXN5bmNUZXN0Q29tcGxldGVyIHtcbiAgcHJpdmF0ZSBfcmVzb2x2ZTogKHJlc3VsdDogYW55KSA9PiB2b2lkO1xuICBwcml2YXRlIF9yZWplY3Q6IChlcnI6IGFueSkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBfcHJvbWlzZTogUHJvbWlzZTxhbnk+ID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgdGhpcy5fcmVzb2x2ZSA9IHJlcztcbiAgICB0aGlzLl9yZWplY3QgPSByZWo7XG4gIH0pO1xuICBkb25lKHZhbHVlPzogYW55KSB7IHRoaXMuX3Jlc29sdmUodmFsdWUpOyB9XG5cbiAgZmFpbChlcnJvcj86IGFueSwgc3RhY2tUcmFjZT86IHN0cmluZykgeyB0aGlzLl9yZWplY3QoZXJyb3IpOyB9XG5cbiAgZ2V0IHByb21pc2UoKTogUHJvbWlzZTxhbnk+IHsgcmV0dXJuIHRoaXMuX3Byb21pc2U7IH1cbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Compiler, Injectable } from '@angular/core';\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw Error('unimplemented');\n}\n/**\n * Special interface to the compiler only used by testing\n *\n * \\@experimental\n */\nexport class TestingCompiler extends Compiler {\n    /**\n     * @return {?}\n     */\n    get injector() { throw unimplemented(); }\n    /**\n     * @param {?} module\n     * @param {?} overrides\n     * @return {?}\n     */\n    overrideModule(module, overrides) {\n        throw unimplemented();\n    }\n    /**\n     * @param {?} directive\n     * @param {?} overrides\n     * @return {?}\n     */\n    overrideDirective(directive, overrides) {\n        throw unimplemented();\n    }\n    /**\n     * @param {?} component\n     * @param {?} overrides\n     * @return {?}\n     */\n    overrideComponent(component, overrides) {\n        throw unimplemented();\n    }\n    /**\n     * @param {?} directive\n     * @param {?} overrides\n     * @return {?}\n     */\n    overridePipe(directive, overrides) {\n        throw unimplemented();\n    }\n    /**\n     * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n     * so that it can use the code generated by AOT.\n     * @param {?} summaries\n     * @return {?}\n     */\n    loadAotSummaries(summaries) { throw unimplemented(); }\n    /**\n     * Gets the component factory for the given component.\n     * This assumes that the component has been compiled before calling this call using\n     * `compileModuleAndAllComponents*`.\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    getComponentFactory(component) { throw unimplemented(); }\n    /**\n     * Returns the component type that is stored in the given error.\n     * This can be used for errors created by compileModule...\n     * @param {?} error\n     * @return {?}\n     */\n    getComponentFromError(error) { throw unimplemented(); }\n}\nTestingCompiler.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTestingCompiler.ctorParameters = () => [];\nfunction TestingCompiler_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    TestingCompiler.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    TestingCompiler.ctorParameters;\n}\n/**\n * A factory for creating a Compiler\n *\n * \\@experimental\n * @abstract\n */\nexport class TestingCompilerFactory {\n}\nfunction TestingCompilerFactory_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?=} options\n     * @return {?}\n     */\n    TestingCompilerFactory.prototype.createTestingCompiler = function (options) { };\n}\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdF9jb21waWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvdGVzdGluZy9zcmMvdGVzdF9jb21waWxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBQyxRQUFRLEVBQTJELFVBQVUsRUFBaUMsTUFBTSxlQUFlLENBQUM7Ozs7QUFJNUk7SUFDRSxNQUFNLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUM5Qjs7Ozs7O0FBUUQsTUFBTSxzQkFBdUIsU0FBUSxRQUFROzs7O0lBQzNDLElBQUksUUFBUSxLQUFlLE1BQU0sYUFBYSxFQUFFLENBQUMsRUFBRTs7Ozs7O0lBQ25ELGNBQWMsQ0FBQyxNQUFpQixFQUFFLFNBQXFDO1FBQ3JFLE1BQU0sYUFBYSxFQUFFLENBQUM7S0FDdkI7Ozs7OztJQUNELGlCQUFpQixDQUFDLFNBQW9CLEVBQUUsU0FBc0M7UUFDNUUsTUFBTSxhQUFhLEVBQUUsQ0FBQztLQUN2Qjs7Ozs7O0lBQ0QsaUJBQWlCLENBQUMsU0FBb0IsRUFBRSxTQUFzQztRQUM1RSxNQUFNLGFBQWEsRUFBRSxDQUFDO0tBQ3ZCOzs7Ozs7SUFDRCxZQUFZLENBQUMsU0FBb0IsRUFBRSxTQUFpQztRQUNsRSxNQUFNLGFBQWEsRUFBRSxDQUFDO0tBQ3ZCOzs7Ozs7O0lBS0QsZ0JBQWdCLENBQUMsU0FBc0IsSUFBSSxNQUFNLGFBQWEsRUFBRSxDQUFDLEVBQUU7Ozs7Ozs7OztJQU9uRSxtQkFBbUIsQ0FBSSxTQUFrQixJQUF5QixNQUFNLGFBQWEsRUFBRSxDQUFDLEVBQUU7Ozs7Ozs7SUFNMUYscUJBQXFCLENBQUMsS0FBWSxJQUFvQixNQUFNLGFBQWEsRUFBRSxDQUFDLEVBQUU7OztZQWhDL0UsVUFBVTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdDWCxNQUFNO0NBRUwiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7Q29tcGlsZXIsIENvbXBpbGVyT3B0aW9ucywgQ29tcG9uZW50LCBDb21wb25lbnRGYWN0b3J5LCBEaXJlY3RpdmUsIEluamVjdGFibGUsIEluamVjdG9yLCBOZ01vZHVsZSwgUGlwZSwgVHlwZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7TWV0YWRhdGFPdmVycmlkZX0gZnJvbSAnLi9tZXRhZGF0YV9vdmVycmlkZSc7XG5cbmZ1bmN0aW9uIHVuaW1wbGVtZW50ZWQoKTogYW55IHtcbiAgdGhyb3cgRXJyb3IoJ3VuaW1wbGVtZW50ZWQnKTtcbn1cblxuLyoqXG4gKiBTcGVjaWFsIGludGVyZmFjZSB0byB0aGUgY29tcGlsZXIgb25seSB1c2VkIGJ5IHRlc3RpbmdcbiAqXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUZXN0aW5nQ29tcGlsZXIgZXh0ZW5kcyBDb21waWxlciB7XG4gIGdldCBpbmplY3RvcigpOiBJbmplY3RvciB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfVxuICBvdmVycmlkZU1vZHVsZShtb2R1bGU6IFR5cGU8YW55Piwgb3ZlcnJpZGVzOiBNZXRhZGF0YU92ZXJyaWRlPE5nTW9kdWxlPik6IHZvaWQge1xuICAgIHRocm93IHVuaW1wbGVtZW50ZWQoKTtcbiAgfVxuICBvdmVycmlkZURpcmVjdGl2ZShkaXJlY3RpdmU6IFR5cGU8YW55Piwgb3ZlcnJpZGVzOiBNZXRhZGF0YU92ZXJyaWRlPERpcmVjdGl2ZT4pOiB2b2lkIHtcbiAgICB0aHJvdyB1bmltcGxlbWVudGVkKCk7XG4gIH1cbiAgb3ZlcnJpZGVDb21wb25lbnQoY29tcG9uZW50OiBUeXBlPGFueT4sIG92ZXJyaWRlczogTWV0YWRhdGFPdmVycmlkZTxDb21wb25lbnQ+KTogdm9pZCB7XG4gICAgdGhyb3cgdW5pbXBsZW1lbnRlZCgpO1xuICB9XG4gIG92ZXJyaWRlUGlwZShkaXJlY3RpdmU6IFR5cGU8YW55Piwgb3ZlcnJpZGVzOiBNZXRhZGF0YU92ZXJyaWRlPFBpcGU+KTogdm9pZCB7XG4gICAgdGhyb3cgdW5pbXBsZW1lbnRlZCgpO1xuICB9XG4gIC8qKlxuICAgKiBBbGxvd3MgdG8gcGFzcyB0aGUgY29tcGlsZSBzdW1tYXJ5IGZyb20gQU9UIGNvbXBpbGF0aW9uIHRvIHRoZSBKSVQgY29tcGlsZXIsXG4gICAqIHNvIHRoYXQgaXQgY2FuIHVzZSB0aGUgY29kZSBnZW5lcmF0ZWQgYnkgQU9ULlxuICAgKi9cbiAgbG9hZEFvdFN1bW1hcmllcyhzdW1tYXJpZXM6ICgpID0+IGFueVtdKSB7IHRocm93IHVuaW1wbGVtZW50ZWQoKTsgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjb21wb25lbnQgZmFjdG9yeSBmb3IgdGhlIGdpdmVuIGNvbXBvbmVudC5cbiAgICogVGhpcyBhc3N1bWVzIHRoYXQgdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBjb21waWxlZCBiZWZvcmUgY2FsbGluZyB0aGlzIGNhbGwgdXNpbmdcbiAgICogYGNvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzKmAuXG4gICAqL1xuICBnZXRDb21wb25lbnRGYWN0b3J5PFQ+KGNvbXBvbmVudDogVHlwZTxUPik6IENvbXBvbmVudEZhY3Rvcnk8VD4geyB0aHJvdyB1bmltcGxlbWVudGVkKCk7IH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IHR5cGUgdGhhdCBpcyBzdG9yZWQgaW4gdGhlIGdpdmVuIGVycm9yLlxuICAgKiBUaGlzIGNhbiBiZSB1c2VkIGZvciBlcnJvcnMgY3JlYXRlZCBieSBjb21waWxlTW9kdWxlLi4uXG4gICAqL1xuICBnZXRDb21wb25lbnRGcm9tRXJyb3IoZXJyb3I6IEVycm9yKTogVHlwZTxhbnk+fG51bGwgeyB0aHJvdyB1bmltcGxlbWVudGVkKCk7IH1cbn1cblxuLyoqXG4gKiBBIGZhY3RvcnkgZm9yIGNyZWF0aW5nIGEgQ29tcGlsZXJcbiAqXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUZXN0aW5nQ29tcGlsZXJGYWN0b3J5IHtcbiAgYWJzdHJhY3QgY3JlYXRlVGVzdGluZ0NvbXBpbGVyKG9wdGlvbnM/OiBDb21waWxlck9wdGlvbnNbXSk6IFRlc3RpbmdDb21waWxlcjtcbn1cbiJdfQ==","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationInitStatus, Component, InjectionToken, Injector, NgModule, NgZone, Optional, SkipSelf, ɵAPP_ROOT as APP_ROOT, ɵclearOverrides as clearOverrides, ɵoverrideComponentView as overrideComponentView, ɵoverrideProvider as overrideProvider, ɵstringify as stringify } from '@angular/core';\nimport { AsyncTestCompleter } from './async_test_completer';\nimport { ComponentFixture } from './component_fixture';\nimport { TestingCompilerFactory } from './test_compiler';\nconst /** @type {?} */ UNDEFINED = new Object();\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * \\@experimental\n */\nexport class TestComponentRenderer {\n    /**\n     * @param {?} rootElementId\n     * @return {?}\n     */\n    insertRootElement(rootElementId) { }\n}\nlet /** @type {?} */ _nextRootElementId = 0;\n/**\n * \\@experimental\n */\nexport const /** @type {?} */ ComponentFixtureAutoDetect = new InjectionToken('ComponentFixtureAutoDetect');\n/**\n * \\@experimental\n */\nexport const /** @type {?} */ ComponentFixtureNoNgZone = new InjectionToken('ComponentFixtureNoNgZone');\n/**\n * \\@whatItDoes Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n * \\@description\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * \\@stable\n */\nexport class TestBed {\n    constructor() {\n        this._instantiated = false;\n        this._compiler = /** @type {?} */ ((null));\n        this._moduleRef = /** @type {?} */ ((null));\n        this._moduleFactory = /** @type {?} */ ((null));\n        this._compilerOptions = [];\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._activeFixtures = [];\n        this._testEnvAotSummaries = () => [];\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this.platform = /** @type {?} */ ((null));\n        this.ngModule = /** @type {?} */ ((null));\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '\\@angular/<platform_name>/testing'.\n     *\n     * \\@experimental\n     * @param {?} ngModule\n     * @param {?} platform\n     * @param {?=} aotSummaries\n     * @return {?}\n     */\n    static initTestEnvironment(ngModule, platform, aotSummaries) {\n        const /** @type {?} */ testBed = getTestBed();\n        testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n        return testBed;\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * \\@experimental\n     * @return {?}\n     */\n    static resetTestEnvironment() { getTestBed().resetTestEnvironment(); }\n    /**\n     * @return {?}\n     */\n    static resetTestingModule() {\n        getTestBed().resetTestingModule();\n        return TestBed;\n    }\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     * @param {?} config\n     * @return {?}\n     */\n    static configureCompiler(config) {\n        getTestBed().configureCompiler(config);\n        return TestBed;\n    }\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     * @param {?} moduleDef\n     * @return {?}\n     */\n    static configureTestingModule(moduleDef) {\n        getTestBed().configureTestingModule(moduleDef);\n        return TestBed;\n    }\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     * @return {?}\n     */\n    static compileComponents() { return getTestBed().compileComponents(); }\n    /**\n     * @param {?} ngModule\n     * @param {?} override\n     * @return {?}\n     */\n    static overrideModule(ngModule, override) {\n        getTestBed().overrideModule(ngModule, override);\n        return TestBed;\n    }\n    /**\n     * @param {?} component\n     * @param {?} override\n     * @return {?}\n     */\n    static overrideComponent(component, override) {\n        getTestBed().overrideComponent(component, override);\n        return TestBed;\n    }\n    /**\n     * @param {?} directive\n     * @param {?} override\n     * @return {?}\n     */\n    static overrideDirective(directive, override) {\n        getTestBed().overrideDirective(directive, override);\n        return TestBed;\n    }\n    /**\n     * @param {?} pipe\n     * @param {?} override\n     * @return {?}\n     */\n    static overridePipe(pipe, override) {\n        getTestBed().overridePipe(pipe, override);\n        return TestBed;\n    }\n    /**\n     * @param {?} component\n     * @param {?} template\n     * @return {?}\n     */\n    static overrideTemplate(component, template) {\n        getTestBed().overrideComponent(component, { set: { template, templateUrl: /** @type {?} */ ((null)) } });\n        return TestBed;\n    }\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     * @param {?} component\n     * @param {?} template\n     * @return {?}\n     */\n    static overrideTemplateUsingTestingModule(component, template) {\n        getTestBed().overrideTemplateUsingTestingModule(component, template);\n        return TestBed;\n    }\n    /**\n     * @param {?} token\n     * @param {?} provider\n     * @return {?}\n     */\n    static overrideProvider(token, provider) {\n        getTestBed().overrideProvider(token, /** @type {?} */ (provider));\n        return TestBed;\n    }\n    /**\n     * @param {?} token\n     * @param {?} provider\n     * @return {?}\n     */\n    static deprecatedOverrideProvider(token, provider) {\n        getTestBed().deprecatedOverrideProvider(token, /** @type {?} */ (provider));\n        return TestBed;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    static get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n        return getTestBed().get(token, notFoundValue);\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    static createComponent(component) {\n        return getTestBed().createComponent(component);\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '\\@angular/<platform_name>/testing'.\n     *\n     * \\@experimental\n     * @param {?} ngModule\n     * @param {?} platform\n     * @param {?=} aotSummaries\n     * @return {?}\n     */\n    initTestEnvironment(ngModule, platform, aotSummaries) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        this.platform = platform;\n        this.ngModule = ngModule;\n        if (aotSummaries) {\n            this._testEnvAotSummaries = aotSummaries;\n        }\n    }\n    /**\n     * Reset the providers for the test injector.\n     *\n     * \\@experimental\n     * @return {?}\n     */\n    resetTestEnvironment() {\n        this.resetTestingModule();\n        this.platform = /** @type {?} */ ((null));\n        this.ngModule = /** @type {?} */ ((null));\n        this._testEnvAotSummaries = () => [];\n    }\n    /**\n     * @return {?}\n     */\n    resetTestingModule() {\n        clearOverrides();\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._compiler = /** @type {?} */ ((null));\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this._moduleRef = /** @type {?} */ ((null));\n        this._moduleFactory = /** @type {?} */ ((null));\n        this._compilerOptions = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._instantiated = false;\n        this._activeFixtures.forEach((fixture) => {\n            try {\n                fixture.destroy();\n            }\n            catch (/** @type {?} */ e) {\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    configureCompiler(config) {\n        this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n        this._compilerOptions.push(config);\n    }\n    /**\n     * @param {?} moduleDef\n     * @return {?}\n     */\n    configureTestingModule(moduleDef) {\n        this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n        if (moduleDef.providers) {\n            this._providers.push(...moduleDef.providers);\n        }\n        if (moduleDef.declarations) {\n            this._declarations.push(...moduleDef.declarations);\n        }\n        if (moduleDef.imports) {\n            this._imports.push(...moduleDef.imports);\n        }\n        if (moduleDef.schemas) {\n            this._schemas.push(...moduleDef.schemas);\n        }\n        if (moduleDef.aotSummaries) {\n            this._aotSummaries.push(moduleDef.aotSummaries);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    compileComponents() {\n        if (this._moduleFactory || this._instantiated) {\n            return Promise.resolve(null);\n        }\n        const /** @type {?} */ moduleType = this._createCompilerAndModule();\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n            .then((moduleAndComponentFactories) => {\n            this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _initIfNeeded() {\n        if (this._instantiated) {\n            return;\n        }\n        if (!this._moduleFactory) {\n            try {\n                const /** @type {?} */ moduleType = this._createCompilerAndModule();\n                this._moduleFactory =\n                    this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n            }\n            catch (/** @type {?} */ e) {\n                const /** @type {?} */ errorCompType = this._compiler.getComponentFromError(e);\n                if (errorCompType) {\n                    throw new Error(`This test module uses the component ${stringify(errorCompType)} which is using a \"templateUrl\" or \"styleUrls\", but they were never compiled. ` +\n                        `Please call \"TestBed.compileComponents\" before your test.`);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        for (const { component, templateOf } of this._templateOverrides) {\n            const /** @type {?} */ compFactory = this._compiler.getComponentFactory(templateOf);\n            overrideComponentView(component, compFactory);\n        }\n        const /** @type {?} */ ngZone = new NgZone({ enableLongStackTrace: true });\n        const /** @type {?} */ providers = [{ provide: NgZone, useValue: ngZone }];\n        const /** @type {?} */ ngZoneInjector = Injector.create({\n            providers: providers,\n            parent: this.platform.injector,\n            name: this._moduleFactory.moduleType.name\n        });\n        this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n        // before accessing it.\n        (/** @type {?} */ (this._moduleRef.injector.get(ApplicationInitStatus))).runInitializers();\n        this._instantiated = true;\n    }\n    /**\n     * @return {?}\n     */\n    _createCompilerAndModule() {\n        const /** @type {?} */ providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n        const /** @type {?} */ declarations = [...this._declarations, ...this._templateOverrides.map(entry => entry.templateOf)];\n        const /** @type {?} */ rootScopeImports = [];\n        const /** @type {?} */ rootProviderOverrides = this._rootProviderOverrides;\n        if (this._isRoot) {\n            class RootScopeModule {\n            }\n            RootScopeModule.decorators = [\n                { type: NgModule, args: [{\n                            providers: [\n                                ...rootProviderOverrides,\n                            ],\n                        },] },\n            ];\n            /** @nocollapse */\n            RootScopeModule.ctorParameters = () => [];\n            function RootScopeModule_tsickle_Closure_declarations() {\n                /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n                RootScopeModule.decorators;\n                /**\n                 * @nocollapse\n                 * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n                 */\n                RootScopeModule.ctorParameters;\n            }\n            rootScopeImports.push(RootScopeModule);\n        }\n        providers.push({ provide: APP_ROOT, useValue: this._isRoot });\n        const /** @type {?} */ imports = [rootScopeImports, this.ngModule, this._imports];\n        const /** @type {?} */ schemas = this._schemas;\n        class DynamicTestModule {\n        }\n        DynamicTestModule.decorators = [\n            { type: NgModule, args: [{ providers, declarations, imports, schemas },] },\n        ];\n        /** @nocollapse */\n        DynamicTestModule.ctorParameters = () => [];\n        function DynamicTestModule_tsickle_Closure_declarations() {\n            /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n            DynamicTestModule.decorators;\n            /**\n             * @nocollapse\n             * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n             */\n            DynamicTestModule.ctorParameters;\n        }\n        const /** @type {?} */ compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n        this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n        for (const /** @type {?} */ summary of [this._testEnvAotSummaries, ...this._aotSummaries]) {\n            this._compiler.loadAotSummaries(summary);\n        }\n        this._moduleOverrides.forEach((entry) => this._compiler.overrideModule(entry[0], entry[1]));\n        this._componentOverrides.forEach((entry) => this._compiler.overrideComponent(entry[0], entry[1]));\n        this._directiveOverrides.forEach((entry) => this._compiler.overrideDirective(entry[0], entry[1]));\n        this._pipeOverrides.forEach((entry) => this._compiler.overridePipe(entry[0], entry[1]));\n        return DynamicTestModule;\n    }\n    /**\n     * @param {?} methodName\n     * @param {?} methodDescription\n     * @return {?}\n     */\n    _assertNotInstantiated(methodName, methodDescription) {\n        if (this._instantiated) {\n            throw new Error(`Cannot ${methodDescription} when the test module has already been instantiated. ` +\n                `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n        this._initIfNeeded();\n        if (token === TestBed) {\n            return this;\n        }\n        // Tests can inject things from the ng module and from the compiler,\n        // but the ng module can't inject things from the compiler and vice versa.\n        const /** @type {?} */ result = this._moduleRef.injector.get(token, UNDEFINED);\n        return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n    }\n    /**\n     * @param {?} tokens\n     * @param {?} fn\n     * @param {?=} context\n     * @return {?}\n     */\n    execute(tokens, fn, context) {\n        this._initIfNeeded();\n        const /** @type {?} */ params = tokens.map(t => this.get(t));\n        return fn.apply(context, params);\n    }\n    /**\n     * @param {?} ngModule\n     * @param {?} override\n     * @return {?}\n     */\n    overrideModule(ngModule, override) {\n        this._assertNotInstantiated('overrideModule', 'override module metadata');\n        this._moduleOverrides.push([ngModule, override]);\n    }\n    /**\n     * @param {?} component\n     * @param {?} override\n     * @return {?}\n     */\n    overrideComponent(component, override) {\n        this._assertNotInstantiated('overrideComponent', 'override component metadata');\n        this._componentOverrides.push([component, override]);\n    }\n    /**\n     * @param {?} directive\n     * @param {?} override\n     * @return {?}\n     */\n    overrideDirective(directive, override) {\n        this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this._directiveOverrides.push([directive, override]);\n    }\n    /**\n     * @param {?} pipe\n     * @param {?} override\n     * @return {?}\n     */\n    overridePipe(pipe, override) {\n        this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this._pipeOverrides.push([pipe, override]);\n    }\n    /**\n     * @param {?} token\n     * @param {?} provider\n     * @return {?}\n     */\n    overrideProvider(token, provider) {\n        this.overrideProviderImpl(token, provider);\n    }\n    /**\n     * @param {?} token\n     * @param {?} provider\n     * @return {?}\n     */\n    deprecatedOverrideProvider(token, provider) {\n        this.overrideProviderImpl(token, provider, /* deprecated */ /* deprecated */ true);\n    }\n    /**\n     * @param {?} token\n     * @param {?} provider\n     * @param {?=} deprecated\n     * @return {?}\n     */\n    overrideProviderImpl(token, provider, deprecated = false) {\n        if (typeof token !== 'string' && token.ngInjectableDef &&\n            token.ngInjectableDef.providedIn === 'root') {\n            if (provider.useFactory) {\n                this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n            }\n            else {\n                this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n            }\n        }\n        let /** @type {?} */ flags = 0;\n        let /** @type {?} */ value;\n        if (provider.useFactory) {\n            flags |= 1024 /* TypeFactoryProvider */;\n            value = provider.useFactory;\n        }\n        else {\n            flags |= 256 /* TypeValueProvider */;\n            value = provider.useValue;\n        }\n        const /** @type {?} */ deps = (provider.deps || []).map((dep) => {\n            let /** @type {?} */ depFlags = 0 /* None */;\n            let /** @type {?} */ depToken;\n            if (Array.isArray(dep)) {\n                dep.forEach((entry) => {\n                    if (entry instanceof Optional) {\n                        depFlags |= 2 /* Optional */;\n                    }\n                    else if (entry instanceof SkipSelf) {\n                        depFlags |= 1 /* SkipSelf */;\n                    }\n                    else {\n                        depToken = entry;\n                    }\n                });\n            }\n            else {\n                depToken = dep;\n            }\n            return [depFlags, depToken];\n        });\n        overrideProvider({ token, flags, deps, value, deprecatedBehavior: deprecated });\n    }\n    /**\n     * @param {?} component\n     * @param {?} template\n     * @return {?}\n     */\n    overrideTemplateUsingTestingModule(component, template) {\n        this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n        class OverrideComponent {\n        }\n        OverrideComponent.decorators = [\n            { type: Component, args: [{ selector: 'empty', template },] },\n        ];\n        /** @nocollapse */\n        OverrideComponent.ctorParameters = () => [];\n        function OverrideComponent_tsickle_Closure_declarations() {\n            /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n            OverrideComponent.decorators;\n            /**\n             * @nocollapse\n             * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n             */\n            OverrideComponent.ctorParameters;\n        }\n        this._templateOverrides.push({ component, templateOf: OverrideComponent });\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    createComponent(component) {\n        this._initIfNeeded();\n        const /** @type {?} */ componentFactory = this._compiler.getComponentFactory(component);\n        if (!componentFactory) {\n            throw new Error(`Cannot create the component ${stringify(component)} as it was not imported into the testing module!`);\n        }\n        const /** @type {?} */ noNgZone = this.get(ComponentFixtureNoNgZone, false);\n        const /** @type {?} */ autoDetect = this.get(ComponentFixtureAutoDetect, false);\n        const /** @type {?} */ ngZone = noNgZone ? null : this.get(NgZone, null);\n        const /** @type {?} */ testComponentRenderer = this.get(TestComponentRenderer);\n        const /** @type {?} */ rootElId = `root${_nextRootElementId++}`;\n        testComponentRenderer.insertRootElement(rootElId);\n        const /** @type {?} */ initComponent = () => {\n            const /** @type {?} */ componentRef = componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        const /** @type {?} */ fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n        this._activeFixtures.push(fixture);\n        return fixture;\n    }\n}\nfunction TestBed_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TestBed.prototype._instantiated;\n    /** @type {?} */\n    TestBed.prototype._compiler;\n    /** @type {?} */\n    TestBed.prototype._moduleRef;\n    /** @type {?} */\n    TestBed.prototype._moduleFactory;\n    /** @type {?} */\n    TestBed.prototype._compilerOptions;\n    /** @type {?} */\n    TestBed.prototype._moduleOverrides;\n    /** @type {?} */\n    TestBed.prototype._componentOverrides;\n    /** @type {?} */\n    TestBed.prototype._directiveOverrides;\n    /** @type {?} */\n    TestBed.prototype._pipeOverrides;\n    /** @type {?} */\n    TestBed.prototype._providers;\n    /** @type {?} */\n    TestBed.prototype._declarations;\n    /** @type {?} */\n    TestBed.prototype._imports;\n    /** @type {?} */\n    TestBed.prototype._schemas;\n    /** @type {?} */\n    TestBed.prototype._activeFixtures;\n    /** @type {?} */\n    TestBed.prototype._testEnvAotSummaries;\n    /** @type {?} */\n    TestBed.prototype._aotSummaries;\n    /** @type {?} */\n    TestBed.prototype._templateOverrides;\n    /** @type {?} */\n    TestBed.prototype._isRoot;\n    /** @type {?} */\n    TestBed.prototype._rootProviderOverrides;\n    /** @type {?} */\n    TestBed.prototype.platform;\n    /** @type {?} */\n    TestBed.prototype.ngModule;\n}\nlet /** @type {?} */ _testBed = /** @type {?} */ ((null));\n/**\n * \\@experimental\n * @return {?}\n */\nexport function getTestBed() {\n    return _testBed = _testBed || new TestBed();\n}\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', \\@Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * \\@stable\n * @param {?} tokens\n * @param {?} fn\n * @return {?}\n */\nexport function inject(tokens, fn) {\n    const /** @type {?} */ testBed = getTestBed();\n    if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n            // the injected tokens.\n            return testBed.compileComponents().then(() => {\n                const /** @type {?} */ completer = testBed.get(AsyncTestCompleter);\n                testBed.execute(tokens, fn, this);\n                return completer.promise;\n            });\n        };\n    }\n    else {\n        // Not using an arrow function to preserve context passed from call site\n        return function () { return testBed.execute(tokens, fn, this); };\n    }\n}\n/**\n * \\@experimental\n */\nexport class InjectSetupWrapper {\n    /**\n     * @param {?} _moduleDef\n     */\n    constructor(_moduleDef) {\n        this._moduleDef = _moduleDef;\n    }\n    /**\n     * @return {?}\n     */\n    _addModule() {\n        const /** @type {?} */ moduleDef = this._moduleDef();\n        if (moduleDef) {\n            getTestBed().configureTestingModule(moduleDef);\n        }\n    }\n    /**\n     * @param {?} tokens\n     * @param {?} fn\n     * @return {?}\n     */\n    inject(tokens, fn) {\n        const /** @type {?} */ self = this;\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            self._addModule();\n            return inject(tokens, fn).call(this);\n        };\n    }\n}\nfunction InjectSetupWrapper_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectSetupWrapper.prototype._moduleDef;\n}\n/**\n * @param {?} moduleDef\n * @param {?=} fn\n * @return {?}\n */\nexport function withModule(moduleDef, fn) {\n    if (fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            const /** @type {?} */ testBed = getTestBed();\n            if (moduleDef) {\n                testBed.configureTestingModule(moduleDef);\n            }\n            return fn.apply(this);\n        };\n    }\n    return new InjectSetupWrapper(() => moduleDef);\n}\n\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { resetFakeAsyncZone } from './fake_async';\nimport { TestBed } from './test_bed';\nconst /** @type {?} */ _global = /** @type {?} */ ((typeof window === 'undefined' ? global : window));\n// Reset the test providers and the fake async zone before each test.\nif (_global.beforeEach) {\n    _global.beforeEach(() => {\n        TestBed.resetTestingModule();\n        resetFakeAsyncZone();\n    });\n}\n// TODO(juliemr): remove this, only used because we need to export something to have compilation\n// work.\nexport const /** @type {?} */ __core_private_testing_placeholder__ = '';\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmb3JlX2VhY2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3Rlc3Rpbmcvc3JjL2JlZm9yZV9lYWNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBY0EsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ2hELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFJbkMsdUJBQU0sT0FBTyxxQkFBUSxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDOztBQUd2RSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUN2QixPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUN0QixPQUFPLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUM3QixrQkFBa0IsRUFBRSxDQUFDO0tBQ3RCLENBQUMsQ0FBQztDQUNKOzs7QUFJRCxNQUFNLENBQUMsdUJBQU0sb0NBQW9DLEdBQUcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIFB1YmxpYyBUZXN0IExpYnJhcnkgZm9yIHVuaXQgdGVzdGluZyBBbmd1bGFyIGFwcGxpY2F0aW9ucy4gQXNzdW1lcyB0aGF0IHlvdSBhcmUgcnVubmluZ1xuICogd2l0aCBKYXNtaW5lLCBNb2NoYSwgb3IgYSBzaW1pbGFyIGZyYW1ld29yayB3aGljaCBleHBvcnRzIGEgYmVmb3JlRWFjaCBmdW5jdGlvbiBhbmRcbiAqIGFsbG93cyB0ZXN0cyB0byBiZSBhc3luY2hyb25vdXMgYnkgZWl0aGVyIHJldHVybmluZyBhIHByb21pc2Ugb3IgdXNpbmcgYSAnZG9uZScgcGFyYW1ldGVyLlxuICovXG5cbmltcG9ydCB7cmVzZXRGYWtlQXN5bmNab25lfSBmcm9tICcuL2Zha2VfYXN5bmMnO1xuaW1wb3J0IHtUZXN0QmVkfSBmcm9tICcuL3Rlc3RfYmVkJztcblxuZGVjbGFyZSB2YXIgZ2xvYmFsOiBhbnk7XG5cbmNvbnN0IF9nbG9iYWwgPSA8YW55Pih0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvdyk7XG5cbi8vIFJlc2V0IHRoZSB0ZXN0IHByb3ZpZGVycyBhbmQgdGhlIGZha2UgYXN5bmMgem9uZSBiZWZvcmUgZWFjaCB0ZXN0LlxuaWYgKF9nbG9iYWwuYmVmb3JlRWFjaCkge1xuICBfZ2xvYmFsLmJlZm9yZUVhY2goKCkgPT4ge1xuICAgIFRlc3RCZWQucmVzZXRUZXN0aW5nTW9kdWxlKCk7XG4gICAgcmVzZXRGYWtlQXN5bmNab25lKCk7XG4gIH0pO1xufVxuXG4vLyBUT0RPKGp1bGllbXIpOiByZW1vdmUgdGhpcywgb25seSB1c2VkIGJlY2F1c2Ugd2UgbmVlZCB0byBleHBvcnQgc29tZXRoaW5nIHRvIGhhdmUgY29tcGlsYXRpb25cbi8vIHdvcmsuXG5leHBvcnQgY29uc3QgX19jb3JlX3ByaXZhdGVfdGVzdGluZ19wbGFjZWhvbGRlcl9fID0gJyc7XG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { TestingCompiler as ɵTestingCompiler, TestingCompilerFactory as ɵTestingCompilerFactory } from './test_compiler';\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9leHBvcnRfdGVzdGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvdGVzdGluZy9zcmMvcHJpdmF0ZV9leHBvcnRfdGVzdGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBQyxlQUFlLElBQUksZ0JBQWdCLEVBQUUsc0JBQXNCLElBQUksdUJBQXVCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuZXhwb3J0IHtUZXN0aW5nQ29tcGlsZXIgYXMgybVUZXN0aW5nQ29tcGlsZXIsIFRlc3RpbmdDb21waWxlckZhY3RvcnkgYXMgybVUZXN0aW5nQ29tcGlsZXJGYWN0b3J5fSBmcm9tICcuL3Rlc3RfY29tcGlsZXInO1xuIl19","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wraps a function in a new function which sets up document and HTML for running a test.\n *\n * This function is intended to wrap an existing testing function. The wrapper\n * adds HTML to the `body` element of the `document` and subsequently tears it down.\n *\n * This function is intended to be used with `async await` and `Promise`s. If the wrapped\n * function returns a promise (or is `async`) then the teardown is delayed until that `Promise`\n * is resolved.\n *\n * On `node` this function detects if `document` is present and if not it will create one by\n * loading `domino` and installing it.\n *\n * Example:\n *\n * ```\n * describe('something', () => {\n *   it('should do something', withBody('<my-app></my-app>', async () => {\n *     const myApp = renderComponent(MyApp);\n *     await whenRendered(myApp);\n *     expect(getRenderedText(myApp)).toEqual('Hello World!');\n *   }));\n * });\n * ```\n *\n * \\@experimental\n * @template T\n * @param {?} html HTML which should be inserted into `body` of the `document`.\n * @param {?} blockFn function to wrap. The function can return promise or be `async`.\n * @return {?}\n */\nexport function withBody(html, blockFn) {\n    return /** @type {?} */ (function (done) {\n        ensureDocument();\n        let /** @type {?} */ returnValue = undefined;\n        if (typeof blockFn === 'function') {\n            document.body.innerHTML = html;\n            // TODO(i): I'm not sure why a cast is required here but otherwise I get\n            //   TS2349: Cannot invoke an expression whose type lacks a call signature. Type 'never' has\n            //   no compatible call signatures.\n            let /** @type {?} */ blockReturn = (/** @type {?} */ (blockFn))();\n            if (blockReturn instanceof Promise) {\n                blockReturn = blockReturn.then(done, done.fail);\n            }\n            else {\n                done();\n            }\n        }\n    });\n}\nlet /** @type {?} */ savedDocument = undefined;\nlet /** @type {?} */ savedRequestAnimationFrame = undefined;\nlet /** @type {?} */ savedNode = undefined;\nlet /** @type {?} */ requestAnimationFrameCount = 0;\nconst ɵ0 = function (domino) {\n    if (typeof global == 'object' && global.process && typeof require == 'function') {\n        try {\n            return require(domino);\n        }\n        catch (/** @type {?} */ e) {\n            // It is possible that we don't have domino available in which case just give up.\n        }\n    }\n    // Seems like we don't have domino, give up.\n    return null;\n};\n/**\n * System.js uses regexp to look for `require` statements. `domino` has to be\n * extracted into a constant so that the regexp in the System.js does not match\n * and does not try to load domino in the browser.\n */\nconst /** @type {?} */ domino = (ɵ0)('domino');\n/**\n * Ensure that global has `Document` if we are in node.js\n * \\@experimental\n * @return {?}\n */\nexport function ensureDocument() {\n    if (domino) {\n        // we are in node.js.\n        const /** @type {?} */ window = domino.createWindow('', 'http://localhost');\n        savedDocument = (/** @type {?} */ (global)).document;\n        (/** @type {?} */ (global)).document = window.document;\n        // Trick to avoid Event patching from\n        // https://github.com/angular/angular/blob/7cf5e95ac9f0f2648beebf0d5bd9056b79946970/packages/platform-browser/src/dom/events/dom_events.ts#L112-L132\n        // It fails with Domino with TypeError: Cannot assign to read only property\n        // 'stopImmediatePropagation' of object '#<Event>'\n        (/** @type {?} */ (global)).Event = null;\n        savedNode = (/** @type {?} */ (global)).Node;\n        (/** @type {?} */ (global)).Node = domino.impl.Node;\n        savedRequestAnimationFrame = (/** @type {?} */ (global)).requestAnimationFrame;\n        (/** @type {?} */ (global)).requestAnimationFrame = function (cb) {\n            setImmediate(cb);\n            return requestAnimationFrameCount++;\n        };\n    }\n}\n/**\n * Restore the state of `Document` between tests.\n * \\@experimental\n * @return {?}\n */\nexport function cleanupDocument() {\n    if (savedDocument) {\n        (/** @type {?} */ (global)).document = savedDocument;\n        savedDocument = undefined;\n    }\n    if (savedNode) {\n        (/** @type {?} */ (global)).Node = savedNode;\n        savedNode = undefined;\n    }\n    if (savedRequestAnimationFrame) {\n        (/** @type {?} */ (global)).requestAnimationFrame = savedRequestAnimationFrame;\n        savedRequestAnimationFrame = undefined;\n    }\n}\nif (typeof beforeEach == 'function')\n    beforeEach(ensureDocument);\nif (typeof afterEach == 'function')\n    beforeEach(cleanupDocument);\nexport { ɵ0 };\n\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the core/testing package.\n */\nexport { async } from './async';\nexport { ComponentFixture } from './component_fixture';\nexport { resetFakeAsyncZone, fakeAsync, tick, flush, discardPeriodicTasks, flushMicrotasks } from './fake_async';\nexport { TestComponentRenderer, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, TestBed, getTestBed, inject, InjectSetupWrapper, withModule } from './test_bed';\nexport { __core_private_testing_placeholder__ } from './before_each';\nexport { ɵTestingCompiler, ɵTestingCompilerFactory } from './private_export_testing';\nexport { withBody, ensureDocument, cleanupDocument } from './render3';\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvdGVzdGluZy9zcmMvdGVzdGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBY0Esc0JBQWMsU0FBUyxDQUFDO0FBQ3hCLGlDQUFjLHFCQUFxQixDQUFDO0FBQ3BDLGtHQUFjLGNBQWMsQ0FBQztBQUM3Qix5SkFBYyxZQUFZLENBQUM7QUFDM0IscURBQWMsZUFBZSxDQUFDO0FBRTlCLDBEQUFjLDBCQUEwQixDQUFDO0FBQ3pDLDBEQUFjLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBAbW9kdWxlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVudHJ5IHBvaW50IGZvciBhbGwgcHVibGljIEFQSXMgb2YgdGhlIGNvcmUvdGVzdGluZyBwYWNrYWdlLlxuICovXG5cbmV4cG9ydCAqIGZyb20gJy4vYXN5bmMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb21wb25lbnRfZml4dHVyZSc7XG5leHBvcnQgKiBmcm9tICcuL2Zha2VfYXN5bmMnO1xuZXhwb3J0ICogZnJvbSAnLi90ZXN0X2JlZCc7XG5leHBvcnQgKiBmcm9tICcuL2JlZm9yZV9lYWNoJztcbmV4cG9ydCAqIGZyb20gJy4vbWV0YWRhdGFfb3ZlcnJpZGUnO1xuZXhwb3J0ICogZnJvbSAnLi9wcml2YXRlX2V4cG9ydF90ZXN0aW5nJztcbmV4cG9ydCAqIGZyb20gJy4vcmVuZGVyMyc7XG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport { async, ComponentFixture, resetFakeAsyncZone, fakeAsync, tick, flush, discardPeriodicTasks, flushMicrotasks, TestComponentRenderer, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, TestBed, getTestBed, inject, InjectSetupWrapper, withModule, __core_private_testing_placeholder__, ɵTestingCompiler, ɵTestingCompilerFactory, withBody, ensureDocument, cleanupDocument } from './src/testing';\n// This file only reexports content of the `src` folder. Keep it that way.\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvdGVzdGluZy9wdWJsaWNfYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFhQSxpWUFBYyxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQG1vZHVsZVxuICogQGRlc2NyaXB0aW9uXG4gKiBFbnRyeSBwb2ludCBmb3IgYWxsIHB1YmxpYyBBUElzIG9mIHRoaXMgcGFja2FnZS5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvdGVzdGluZyc7XG5cbi8vIFRoaXMgZmlsZSBvbmx5IHJlZXhwb3J0cyBjb250ZW50IG9mIHRoZSBgc3JjYCBmb2xkZXIuIEtlZXAgaXQgdGhhdCB3YXkuXG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\nexport { async, ComponentFixture, resetFakeAsyncZone, fakeAsync, tick, flush, discardPeriodicTasks, flushMicrotasks, TestComponentRenderer, ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, TestBed, getTestBed, inject, InjectSetupWrapper, withModule, __core_private_testing_placeholder__, ɵTestingCompiler, ɵTestingCompilerFactory, withBody, ensureDocument, cleanupDocument } from './public_api';\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3Rlc3RpbmcvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBYUEsaVlBQWMsY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vLyBUaGlzIGZpbGUgaXMgbm90IHVzZWQgdG8gYnVpbGQgdGhpcyBtb2R1bGUuIEl0IGlzIG9ubHkgdXNlZCBkdXJpbmcgZWRpdGluZ1xuLy8gYnkgdGhlIFR5cGVTY3JpcHQgbGFuZ3VhZ2Ugc2VydmljZSBhbmQgZHVyaW5nIGJ1aWxkIGZvciB2ZXJpZmljYXRpb24uIGBuZ2NgXG4vLyByZXBsYWNlcyB0aGlzIGZpbGUgd2l0aCBwcm9kdWN0aW9uIGluZGV4LnRzIHdoZW4gaXQgcmV3cml0ZXMgcHJpdmF0ZSBzeW1ib2xcbi8vIG5hbWVzLlxuXG5leHBvcnQgKiBmcm9tICcuL3B1YmxpY19hcGknO1xuIl19","/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvcmUvdGVzdGluZy90ZXN0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBRUgsY0FBYyxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxuICovXG5cbmV4cG9ydCAqIGZyb20gJy4vaW5kZXgnO1xuIl19"],"names":["clearOverrides","stringify","overrideComponentView","APP_ROOT","overrideProvider","_global"],"mappings":"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"}