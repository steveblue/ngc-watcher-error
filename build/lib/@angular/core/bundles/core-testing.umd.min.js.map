{"version":3,"sources":["packages/core/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","npm_package","ng","core","tslib","this","tslib_1","_global","window","runInTestZone","fn","context","finishCallback","failCallback","currentZone","Zone","current","AsyncTestZoneSpec","undefined","Error","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","ComponentFixture","componentRef","ngZone","_autoDetect","_this","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","prototype","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","Promise","resolve","res","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","_Zone","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZone","resetDelegate","_inFakeAsyncCall","_getFakeAsyncZoneSpec","flushMicrotasks","AsyncTestCompleter","rej","_reject","done","value","fail","stackTrace","Object","defineProperty","enumerable","configurable","unimplemented","TestingCompiler","_super","apply","arguments","__extends","overrideModule","overrides","overrideDirective","directive","overrideComponent","component","overridePipe","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","decorators","type","Injectable","ctorParameters","Compiler","TestingCompilerFactory","UNDEFINED","TestComponentRenderer","insertRootElement","rootElementId","_nextRootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","TestBed","_instantiated","_compiler","_moduleRef","_moduleFactory","_compilerOptions","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providers","_declarations","_imports","_schemas","_activeFixtures","_testEnvAotSummaries","_aotSummaries","_templateOverrides","_isRoot","_rootProviderOverrides","platform","ngModule","initTestEnvironment","aotSummaries","testBed","getTestBed","resetTestEnvironment","resetTestingModule","configureCompiler","config","configureTestingModule","moduleDef","compileComponents","override","pipe","overrideTemplate","template","set","templateUrl","overrideTemplateUsingTestingModule","overrideProvider","token","provider","deprecatedOverrideProvider","notFoundValue","Injector","THROW_IF_NOT_FOUND","createComponent","ɵclearOverrides","forEach","fixture","e","console","stacktrace","_assertNotInstantiated","push","_a","_b","_c","_d","providers","__spread","declarations","imports","schemas","moduleType","_createCompilerAndModule","compileModuleAndAllComponentsAsync","then","moduleAndComponentFactories","ngModuleFactory","_initIfNeeded","compileModuleAndAllComponentsSync","errorCompType","ɵstringify","__values","compFactory","templateOf","ɵoverrideComponentView","e_1_1","e_1","return","call","NgZone","enableLongStackTrace","ngZoneInjector","create","provide","useValue","name","ApplicationInitStatus","runInitializers","concat","map","entry","rootScopeImports","rootProviderOverrides","RootScopeModule","NgModule","args","ɵAPP_ROOT","e_2","DynamicTestModule","compilerFactory","createTestingCompiler","e_2_1","methodName","methodDescription","result","execute","tokens","params","t","overrideProviderImpl","deprecated","ngInjectableDef","providedIn","useFactory","deps","flags","dep","depToken","depFlags","Array","isArray","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","OverrideComponent","Component","selector","componentFactory","noNgZone","testComponentRenderer","rootElId","initComponent","NULL","_testBed","inject","indexOf","completer","promise","InjectSetupWrapper","_moduleDef","_addModule","self","_global$1","beforeEach","savedDocument","savedRequestAnimationFrame","savedNode","requestAnimationFrameCount","ɵ0","domino","process","ensureDocument","window_1","createWindow","document","Event","Node","impl","requestAnimationFrame","cb","setImmediate","cleanupDocument","afterEach","async","jasmine","err","fakeAsync","_i","length","lastProxyZoneSpec","pendingPeriodicTimers","pendingTimers","tick","millis","flush","maxTurns","discardPeriodicTasks","withModule","__core_private_testing_placeholder__","ɵTestingCompiler","ɵTestingCompilerFactory","withBody","html","blockFn","body","innerHTML","blockReturn"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.0.0-rc.1\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('tslib')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'tslib'], factory) :\n\t(factory((global.npm_package = {}),global.ng.core,global.tslib));\n}(this, (function (exports,core,tslib_1) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _global = (typeof window === 'undefined' ? global : window);\n/**\n * Wraps a test function in an asynchronous test zone. The test will automatically\n * complete when all asynchronous calls within this zone are done. Can be used\n * to wrap an {@link inject} call.\n *\n * Example:\n *\n * ```\n * it('...', async(inject([AClass], (object) => {\n *   object.doSomething.then(() => {\n *     expect(...);\n *   })\n * });\n * ```\n *\n * @stable\n */\nfunction async(fn) {\n    // If we're running using the Jasmine test framework, adapt to call the 'done'\n    // function when asynchronous activity is finished.\n    if (_global.jasmine) {\n        // Not using an arrow function to preserve context passed from call site\n        return function (done) {\n            if (!done) {\n                // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                // fake it here and assume sync.\n                done = function () { };\n                done.fail = function (e) { throw e; };\n            }\n            runInTestZone(fn, this, done, function (err) {\n                if (typeof err === 'string') {\n                    return done.fail(new Error(err));\n                }\n                else {\n                    done.fail(err);\n                }\n            });\n        };\n    }\n    // Otherwise, return a promise which will resolve when asynchronous activity\n    // is finished. This will be correctly consumed by the Mocha framework with\n    // it('...', async(myFn)); or can be used in a custom framework.\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        var _this = this;\n        return new Promise(function (finishCallback, failCallback) {\n            runInTestZone(fn, _this, finishCallback, failCallback);\n        });\n    };\n}\nfunction runInTestZone(fn, context, finishCallback, failCallback) {\n    var currentZone = Zone.current;\n    var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n    if (AsyncTestZoneSpec === undefined) {\n        throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/async-test.js');\n    }\n    var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n    if (ProxyZoneSpec === undefined) {\n        throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n            'Please make sure that your environment includes zone.js/dist/proxy.js');\n    }\n    var proxyZoneSpec = ProxyZoneSpec.get();\n    ProxyZoneSpec.assertPresent();\n    // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n    // If we do it in ProxyZone then we will get to infinite recursion.\n    var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n    var previousDelegate = proxyZoneSpec.getDelegate();\n    proxyZone.parent.run(function () {\n        var testZoneSpec = new AsyncTestZoneSpec(function () {\n            // Need to restore the original zone.\n            currentZone.run(function () {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                finishCallback();\n            });\n        }, function (error) {\n            // Need to restore the original zone.\n            currentZone.run(function () {\n                if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                    // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                    proxyZoneSpec.setDelegate(previousDelegate);\n                }\n                failCallback(error);\n            });\n        }, 'test');\n        proxyZoneSpec.setDelegate(testZoneSpec);\n    });\n    return Zone.current.runGuarded(fn, context);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Fixture for debugging and testing a component.\n *\n * @stable\n */\nvar ComponentFixture = /** @class */ (function () {\n    function ComponentFixture(componentRef, ngZone, _autoDetect) {\n        var _this = this;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        this._autoDetect = _autoDetect;\n        this._isStable = true;\n        this._isDestroyed = false;\n        this._resolve = null;\n        this._promise = null;\n        this._onUnstableSubscription = null;\n        this._onStableSubscription = null;\n        this._onMicrotaskEmptySubscription = null;\n        this._onErrorSubscription = null;\n        this.changeDetectorRef = componentRef.changeDetectorRef;\n        this.elementRef = componentRef.location;\n        this.debugElement = core.getDebugNode(this.elementRef.nativeElement);\n        this.componentInstance = componentRef.instance;\n        this.nativeElement = this.elementRef.nativeElement;\n        this.componentRef = componentRef;\n        this.ngZone = ngZone;\n        if (ngZone) {\n            // Create subscriptions outside the NgZone so that the callbacks run oustide\n            // of NgZone.\n            ngZone.runOutsideAngular(function () {\n                _this._onUnstableSubscription =\n                    ngZone.onUnstable.subscribe({ next: function () { _this._isStable = false; } });\n                _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                    next: function () {\n                        if (_this._autoDetect) {\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            // Do a change detection run with checkNoChanges set to true to check\n                            // there are no changes on the second run.\n                            _this.detectChanges(true);\n                        }\n                    }\n                });\n                _this._onStableSubscription = ngZone.onStable.subscribe({\n                    next: function () {\n                        _this._isStable = true;\n                        // Check whether there is a pending whenStable() completer to resolve.\n                        if (_this._promise !== null) {\n                            // If so check whether there are no pending macrotasks before resolving.\n                            // Do this check in the next tick so that ngZone gets a chance to update the state of\n                            // pending macrotasks.\n                            scheduleMicroTask(function () {\n                                if (!ngZone.hasPendingMacrotasks) {\n                                    if (_this._promise !== null) {\n                                        _this._resolve(true);\n                                        _this._resolve = null;\n                                        _this._promise = null;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                _this._onErrorSubscription =\n                    ngZone.onError.subscribe({ next: function (error) { throw error; } });\n            });\n        }\n    }\n    ComponentFixture.prototype._tick = function (checkNoChanges) {\n        this.changeDetectorRef.detectChanges();\n        if (checkNoChanges) {\n            this.checkNoChanges();\n        }\n    };\n    /**\n     * Trigger a change detection cycle for the component.\n     */\n    /**\n       * Trigger a change detection cycle for the component.\n       */\n    ComponentFixture.prototype.detectChanges = /**\n       * Trigger a change detection cycle for the component.\n       */\n    function (checkNoChanges) {\n        var _this = this;\n        if (checkNoChanges === void 0) { checkNoChanges = true; }\n        if (this.ngZone != null) {\n            // Run the change detection inside the NgZone so that any async tasks as part of the change\n            // detection are captured by the zone and can be waited for in isStable.\n            this.ngZone.run(function () { _this._tick(checkNoChanges); });\n        }\n        else {\n            // Running without zone. Just do the change detection.\n            this._tick(checkNoChanges);\n        }\n    };\n    /**\n     * Do a change detection run to make sure there were no changes.\n     */\n    /**\n       * Do a change detection run to make sure there were no changes.\n       */\n    ComponentFixture.prototype.checkNoChanges = /**\n       * Do a change detection run to make sure there were no changes.\n       */\n    function () { this.changeDetectorRef.checkNoChanges(); };\n    /**\n     * Set whether the fixture should autodetect changes.\n     *\n     * Also runs detectChanges once so that any existing change is detected.\n     */\n    /**\n       * Set whether the fixture should autodetect changes.\n       *\n       * Also runs detectChanges once so that any existing change is detected.\n       */\n    ComponentFixture.prototype.autoDetectChanges = /**\n       * Set whether the fixture should autodetect changes.\n       *\n       * Also runs detectChanges once so that any existing change is detected.\n       */\n    function (autoDetect) {\n        if (autoDetect === void 0) { autoDetect = true; }\n        if (this.ngZone == null) {\n            throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n        }\n        this._autoDetect = autoDetect;\n        this.detectChanges();\n    };\n    /**\n     * Return whether the fixture is currently stable or has async tasks that have not been completed\n     * yet.\n     */\n    /**\n       * Return whether the fixture is currently stable or has async tasks that have not been completed\n       * yet.\n       */\n    ComponentFixture.prototype.isStable = /**\n       * Return whether the fixture is currently stable or has async tasks that have not been completed\n       * yet.\n       */\n    function () { return this._isStable && !this.ngZone.hasPendingMacrotasks; };\n    /**\n     * Get a promise that resolves when the fixture is stable.\n     *\n     * This can be used to resume testing after events have triggered asynchronous activity or\n     * asynchronous change detection.\n     */\n    /**\n       * Get a promise that resolves when the fixture is stable.\n       *\n       * This can be used to resume testing after events have triggered asynchronous activity or\n       * asynchronous change detection.\n       */\n    ComponentFixture.prototype.whenStable = /**\n       * Get a promise that resolves when the fixture is stable.\n       *\n       * This can be used to resume testing after events have triggered asynchronous activity or\n       * asynchronous change detection.\n       */\n    function () {\n        var _this = this;\n        if (this.isStable()) {\n            return Promise.resolve(false);\n        }\n        else if (this._promise !== null) {\n            return this._promise;\n        }\n        else {\n            this._promise = new Promise(function (res) { _this._resolve = res; });\n            return this._promise;\n        }\n    };\n    ComponentFixture.prototype._getRenderer = function () {\n        if (this._renderer === undefined) {\n            this._renderer = this.componentRef.injector.get(core.RendererFactory2, null);\n        }\n        return this._renderer;\n    };\n    /**\n      * Get a promise that resolves when the ui state is stable following animations.\n      */\n    /**\n        * Get a promise that resolves when the ui state is stable following animations.\n        */\n    ComponentFixture.prototype.whenRenderingDone = /**\n        * Get a promise that resolves when the ui state is stable following animations.\n        */\n    function () {\n        var renderer = this._getRenderer();\n        if (renderer && renderer.whenRenderingDone) {\n            return renderer.whenRenderingDone();\n        }\n        return this.whenStable();\n    };\n    /**\n     * Trigger component destruction.\n     */\n    /**\n       * Trigger component destruction.\n       */\n    ComponentFixture.prototype.destroy = /**\n       * Trigger component destruction.\n       */\n    function () {\n        if (!this._isDestroyed) {\n            this.componentRef.destroy();\n            if (this._onUnstableSubscription != null) {\n                this._onUnstableSubscription.unsubscribe();\n                this._onUnstableSubscription = null;\n            }\n            if (this._onStableSubscription != null) {\n                this._onStableSubscription.unsubscribe();\n                this._onStableSubscription = null;\n            }\n            if (this._onMicrotaskEmptySubscription != null) {\n                this._onMicrotaskEmptySubscription.unsubscribe();\n                this._onMicrotaskEmptySubscription = null;\n            }\n            if (this._onErrorSubscription != null) {\n                this._onErrorSubscription.unsubscribe();\n                this._onErrorSubscription = null;\n            }\n            this._isDestroyed = true;\n        }\n    };\n    return ComponentFixture;\n}());\nfunction scheduleMicroTask(fn) {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _Zone = typeof Zone !== 'undefined' ? Zone : null;\nvar FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\nvar ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\nvar _fakeAsyncTestZoneSpec = null;\n/**\n * Clears out the shared fake async zone for a test.\n * To be called in a global `beforeEach`.\n *\n * @experimental\n */\nfunction resetFakeAsyncZone() {\n    _fakeAsyncTestZoneSpec = null;\n    // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n    ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n}\nvar _inFakeAsyncCall = false;\n/**\n * Wraps a function to be executed in the fakeAsync zone:\n * - microtasks are manually executed by calling `flushMicrotasks()`,\n * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n *\n * If there are any pending timers at the end of the function, an exception will be thrown.\n *\n * Can be used to wrap inject() calls.\n *\n * ## Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @param fn\n * @returns The function wrapped to be executed in the fakeAsync zone\n *\n * @experimental\n */\nfunction fakeAsync(fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n        if (_inFakeAsyncCall) {\n            throw new Error('fakeAsync() calls can not be nested');\n        }\n        _inFakeAsyncCall = true;\n        try {\n            if (!_fakeAsyncTestZoneSpec) {\n                if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                    throw new Error('fakeAsync() calls can not be nested');\n                }\n                _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n            }\n            var res = void 0;\n            var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n            proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n            try {\n                res = fn.apply(this, args);\n                flushMicrotasks();\n            }\n            finally {\n                proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n            }\n            if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                    \"periodic timer(s) still in the queue.\");\n            }\n            if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n            }\n            return res;\n        }\n        finally {\n            _inFakeAsyncCall = false;\n            resetFakeAsyncZone();\n        }\n    };\n}\nfunction _getFakeAsyncZoneSpec() {\n    if (_fakeAsyncTestZoneSpec == null) {\n        throw new Error('The code should be running in the fakeAsync zone to call this function');\n    }\n    return _fakeAsyncTestZoneSpec;\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n *\n * The microtasks queue is drained at the very start of this function and after any timer callback\n * has been executed.\n *\n * ## Example\n *\n * {@example core/testing/ts/fake_async.ts region='basic'}\n *\n * @experimental\n */\nfunction tick(millis) {\n    if (millis === void 0) { millis = 0; }\n    _getFakeAsyncZoneSpec().tick(millis);\n}\n/**\n * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n * draining the macrotask queue until it is empty. The returned value is the milliseconds\n * of time that would have been elapsed.\n *\n * @param maxTurns\n * @returns The simulated time elapsed, in millis.\n *\n * @experimental\n */\nfunction flush(maxTurns) {\n    return _getFakeAsyncZoneSpec().flush(maxTurns);\n}\n/**\n * Discard all remaining periodic tasks.\n *\n * @experimental\n */\nfunction discardPeriodicTasks() {\n    var zoneSpec = _getFakeAsyncZoneSpec();\n    var pendingTimers = zoneSpec.pendingPeriodicTimers;\n    zoneSpec.pendingPeriodicTimers.length = 0;\n}\n/**\n * Flush any pending microtasks.\n *\n * @experimental\n */\nfunction flushMicrotasks() {\n    _getFakeAsyncZoneSpec().flushMicrotasks();\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n */\nvar AsyncTestCompleter = /** @class */ (function () {\n    function AsyncTestCompleter() {\n        var _this = this;\n        this._promise = new Promise(function (res, rej) {\n            _this._resolve = res;\n            _this._reject = rej;\n        });\n    }\n    AsyncTestCompleter.prototype.done = function (value) { this._resolve(value); };\n    AsyncTestCompleter.prototype.fail = function (error, stackTrace) { this._reject(error); };\n    Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n        get: function () { return this._promise; },\n        enumerable: true,\n        configurable: true\n    });\n    return AsyncTestCompleter;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction unimplemented() {\n    throw Error('unimplemented');\n}\n/**\n * Special interface to the compiler only used by testing\n *\n * @experimental\n */\nvar TestingCompiler = /** @class */ (function (_super) {\n    tslib_1.__extends(TestingCompiler, _super);\n    function TestingCompiler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n        get: function () { throw unimplemented(); },\n        enumerable: true,\n        configurable: true\n    });\n    TestingCompiler.prototype.overrideModule = function (module, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n        throw unimplemented();\n    };\n    TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n        throw unimplemented();\n    };\n    /**\n     * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n     * so that it can use the code generated by AOT.\n     */\n    /**\n       * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n       * so that it can use the code generated by AOT.\n       */\n    TestingCompiler.prototype.loadAotSummaries = /**\n       * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n       * so that it can use the code generated by AOT.\n       */\n    function (summaries) { throw unimplemented(); };\n    /**\n     * Gets the component factory for the given component.\n     * This assumes that the component has been compiled before calling this call using\n     * `compileModuleAndAllComponents*`.\n     */\n    /**\n       * Gets the component factory for the given component.\n       * This assumes that the component has been compiled before calling this call using\n       * `compileModuleAndAllComponents*`.\n       */\n    TestingCompiler.prototype.getComponentFactory = /**\n       * Gets the component factory for the given component.\n       * This assumes that the component has been compiled before calling this call using\n       * `compileModuleAndAllComponents*`.\n       */\n    function (component) { throw unimplemented(); };\n    /**\n     * Returns the component type that is stored in the given error.\n     * This can be used for errors created by compileModule...\n     */\n    /**\n       * Returns the component type that is stored in the given error.\n       * This can be used for errors created by compileModule...\n       */\n    TestingCompiler.prototype.getComponentFromError = /**\n       * Returns the component type that is stored in the given error.\n       * This can be used for errors created by compileModule...\n       */\n    function (error) { throw unimplemented(); };\n    TestingCompiler.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    TestingCompiler.ctorParameters = function () { return []; };\n    return TestingCompiler;\n}(core.Compiler));\n/**\n * A factory for creating a Compiler\n *\n * @experimental\n */\nvar TestingCompilerFactory = /** @class */ (function () {\n    function TestingCompilerFactory() {\n    }\n    return TestingCompilerFactory;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar UNDEFINED = new Object();\n/**\n * An abstract class for inserting the root test component element in a platform independent way.\n *\n * @experimental\n */\nvar TestComponentRenderer = /** @class */ (function () {\n    function TestComponentRenderer() {\n    }\n    TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n    return TestComponentRenderer;\n}());\nvar _nextRootElementId = 0;\n/**\n * @experimental\n */\nvar ComponentFixtureAutoDetect = new core.InjectionToken('ComponentFixtureAutoDetect');\n/**\n * @experimental\n */\nvar ComponentFixtureNoNgZone = new core.InjectionToken('ComponentFixtureNoNgZone');\n/**\n * @whatItDoes Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n * @description\n *\n * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n *\n * @stable\n */\nvar TestBed = /** @class */ (function () {\n    function TestBed() {\n        this._instantiated = false;\n        this._compiler = null;\n        this._moduleRef = null;\n        this._moduleFactory = null;\n        this._compilerOptions = [];\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._activeFixtures = [];\n        this._testEnvAotSummaries = function () { return []; };\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this.platform = null;\n        this.ngModule = null;\n    }\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    TestBed.initTestEnvironment = /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    function (ngModule, platform, aotSummaries) {\n        var testBed = getTestBed();\n        testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n        return testBed;\n    };\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    TestBed.resetTestEnvironment = /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    function () { getTestBed().resetTestEnvironment(); };\n    TestBed.resetTestingModule = function () {\n        getTestBed().resetTestingModule();\n        return TestBed;\n    };\n    /**\n     * Allows overriding default compiler providers and settings\n     * which are defined in test_injector.js\n     */\n    /**\n       * Allows overriding default compiler providers and settings\n       * which are defined in test_injector.js\n       */\n    TestBed.configureCompiler = /**\n       * Allows overriding default compiler providers and settings\n       * which are defined in test_injector.js\n       */\n    function (config) {\n        getTestBed().configureCompiler(config);\n        return TestBed;\n    };\n    /**\n     * Allows overriding default providers, directives, pipes, modules of the test injector,\n     * which are defined in test_injector.js\n     */\n    /**\n       * Allows overriding default providers, directives, pipes, modules of the test injector,\n       * which are defined in test_injector.js\n       */\n    TestBed.configureTestingModule = /**\n       * Allows overriding default providers, directives, pipes, modules of the test injector,\n       * which are defined in test_injector.js\n       */\n    function (moduleDef) {\n        getTestBed().configureTestingModule(moduleDef);\n        return TestBed;\n    };\n    /**\n     * Compile components with a `templateUrl` for the test's NgModule.\n     * It is necessary to call this function\n     * as fetching urls is asynchronous.\n     */\n    /**\n       * Compile components with a `templateUrl` for the test's NgModule.\n       * It is necessary to call this function\n       * as fetching urls is asynchronous.\n       */\n    TestBed.compileComponents = /**\n       * Compile components with a `templateUrl` for the test's NgModule.\n       * It is necessary to call this function\n       * as fetching urls is asynchronous.\n       */\n    function () { return getTestBed().compileComponents(); };\n    TestBed.overrideModule = function (ngModule, override) {\n        getTestBed().overrideModule(ngModule, override);\n        return TestBed;\n    };\n    TestBed.overrideComponent = function (component, override) {\n        getTestBed().overrideComponent(component, override);\n        return TestBed;\n    };\n    TestBed.overrideDirective = function (directive, override) {\n        getTestBed().overrideDirective(directive, override);\n        return TestBed;\n    };\n    TestBed.overridePipe = function (pipe, override) {\n        getTestBed().overridePipe(pipe, override);\n        return TestBed;\n    };\n    TestBed.overrideTemplate = function (component, template) {\n        getTestBed().overrideComponent(component, { set: { template: template, templateUrl: (null) } });\n        return TestBed;\n    };\n    /**\n     * Overrides the template of the given component, compiling the template\n     * in the context of the TestingModule.\n     *\n     * Note: This works for JIT and AOTed components as well.\n     */\n    /**\n       * Overrides the template of the given component, compiling the template\n       * in the context of the TestingModule.\n       *\n       * Note: This works for JIT and AOTed components as well.\n       */\n    TestBed.overrideTemplateUsingTestingModule = /**\n       * Overrides the template of the given component, compiling the template\n       * in the context of the TestingModule.\n       *\n       * Note: This works for JIT and AOTed components as well.\n       */\n    function (component, template) {\n        getTestBed().overrideTemplateUsingTestingModule(component, template);\n        return TestBed;\n    };\n    TestBed.overrideProvider = function (token, provider) {\n        getTestBed().overrideProvider(token, provider);\n        return TestBed;\n    };\n    TestBed.deprecatedOverrideProvider = function (token, provider) {\n        getTestBed().deprecatedOverrideProvider(token, provider);\n        return TestBed;\n    };\n    TestBed.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n        return getTestBed().get(token, notFoundValue);\n    };\n    TestBed.createComponent = function (component) {\n        return getTestBed().createComponent(component);\n    };\n    /**\n     * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n     * angular module. These are common to every test in the suite.\n     *\n     * This may only be called once, to set up the common providers for the current test\n     * suite on the current platform. If you absolutely need to change the providers,\n     * first use `resetTestEnvironment`.\n     *\n     * Test modules and platforms for individual platforms are available from\n     * '@angular/<platform_name>/testing'.\n     *\n     * @experimental\n     */\n    /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    TestBed.prototype.initTestEnvironment = /**\n       * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n       * angular module. These are common to every test in the suite.\n       *\n       * This may only be called once, to set up the common providers for the current test\n       * suite on the current platform. If you absolutely need to change the providers,\n       * first use `resetTestEnvironment`.\n       *\n       * Test modules and platforms for individual platforms are available from\n       * '@angular/<platform_name>/testing'.\n       *\n       * @experimental\n       */\n    function (ngModule, platform, aotSummaries) {\n        if (this.platform || this.ngModule) {\n            throw new Error('Cannot set base providers because it has already been called');\n        }\n        this.platform = platform;\n        this.ngModule = ngModule;\n        if (aotSummaries) {\n            this._testEnvAotSummaries = aotSummaries;\n        }\n    };\n    /**\n     * Reset the providers for the test injector.\n     *\n     * @experimental\n     */\n    /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    TestBed.prototype.resetTestEnvironment = /**\n       * Reset the providers for the test injector.\n       *\n       * @experimental\n       */\n    function () {\n        this.resetTestingModule();\n        this.platform = (null);\n        this.ngModule = (null);\n        this._testEnvAotSummaries = function () { return []; };\n    };\n    TestBed.prototype.resetTestingModule = function () {\n        core.ɵclearOverrides();\n        this._aotSummaries = [];\n        this._templateOverrides = [];\n        this._compiler = (null);\n        this._moduleOverrides = [];\n        this._componentOverrides = [];\n        this._directiveOverrides = [];\n        this._pipeOverrides = [];\n        this._isRoot = true;\n        this._rootProviderOverrides = [];\n        this._moduleRef = (null);\n        this._moduleFactory = (null);\n        this._compilerOptions = [];\n        this._providers = [];\n        this._declarations = [];\n        this._imports = [];\n        this._schemas = [];\n        this._instantiated = false;\n        this._activeFixtures.forEach(function (fixture) {\n            try {\n                fixture.destroy();\n            }\n            catch (e) {\n                console.error('Error during cleanup of component', {\n                    component: fixture.componentInstance,\n                    stacktrace: e,\n                });\n            }\n        });\n        this._activeFixtures = [];\n    };\n    TestBed.prototype.configureCompiler = function (config) {\n        this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n        this._compilerOptions.push(config);\n    };\n    TestBed.prototype.configureTestingModule = function (moduleDef) {\n        this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n        if (moduleDef.providers) {\n            (_a = this._providers).push.apply(_a, tslib_1.__spread(moduleDef.providers));\n        }\n        if (moduleDef.declarations) {\n            (_b = this._declarations).push.apply(_b, tslib_1.__spread(moduleDef.declarations));\n        }\n        if (moduleDef.imports) {\n            (_c = this._imports).push.apply(_c, tslib_1.__spread(moduleDef.imports));\n        }\n        if (moduleDef.schemas) {\n            (_d = this._schemas).push.apply(_d, tslib_1.__spread(moduleDef.schemas));\n        }\n        if (moduleDef.aotSummaries) {\n            this._aotSummaries.push(moduleDef.aotSummaries);\n        }\n        var _a, _b, _c, _d;\n    };\n    TestBed.prototype.compileComponents = function () {\n        var _this = this;\n        if (this._moduleFactory || this._instantiated) {\n            return Promise.resolve(null);\n        }\n        var moduleType = this._createCompilerAndModule();\n        return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n            .then(function (moduleAndComponentFactories) {\n            _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n    };\n    TestBed.prototype._initIfNeeded = function () {\n        if (this._instantiated) {\n            return;\n        }\n        if (!this._moduleFactory) {\n            try {\n                var moduleType = this._createCompilerAndModule();\n                this._moduleFactory =\n                    this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n            }\n            catch (e) {\n                var errorCompType = this._compiler.getComponentFromError(e);\n                if (errorCompType) {\n                    throw new Error(\"This test module uses the component \" + core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                        \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        try {\n            for (var _a = tslib_1.__values(this._templateOverrides), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var _c = _b.value, component = _c.component, templateOf = _c.templateOf;\n                var compFactory = this._compiler.getComponentFactory(templateOf);\n                core.ɵoverrideComponentView(component, compFactory);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var ngZone = new core.NgZone({ enableLongStackTrace: true });\n        var providers = [{ provide: core.NgZone, useValue: ngZone }];\n        var ngZoneInjector = core.Injector.create({\n            providers: providers,\n            parent: this.platform.injector,\n            name: this._moduleFactory.moduleType.name\n        });\n        this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n        // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n        // before accessing it.\n        // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n        // before accessing it.\n        this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n        this._instantiated = true;\n        var e_1, _d;\n    };\n    TestBed.prototype._createCompilerAndModule = function () {\n        var _this = this;\n        var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n        var declarations = tslib_1.__spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n        var rootScopeImports = [];\n        var rootProviderOverrides = this._rootProviderOverrides;\n        if (this._isRoot) {\n            var RootScopeModule = /** @class */ (function () {\n                function RootScopeModule() {\n                }\n                RootScopeModule.decorators = [\n                    { type: core.NgModule, args: [{\n                                providers: tslib_1.__spread(rootProviderOverrides),\n                            },] },\n                ];\n                /** @nocollapse */\n                RootScopeModule.ctorParameters = function () { return []; };\n                return RootScopeModule;\n            }());\n            rootScopeImports.push(RootScopeModule);\n        }\n        providers.push({ provide: core.ɵAPP_ROOT, useValue: this._isRoot });\n        var imports = [rootScopeImports, this.ngModule, this._imports];\n        var schemas = this._schemas;\n        var DynamicTestModule = /** @class */ (function () {\n            function DynamicTestModule() {\n            }\n            DynamicTestModule.decorators = [\n                { type: core.NgModule, args: [{ providers: providers, declarations: declarations, imports: imports, schemas: schemas },] },\n            ];\n            /** @nocollapse */\n            DynamicTestModule.ctorParameters = function () { return []; };\n            return DynamicTestModule;\n        }());\n        var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n        this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n        try {\n            for (var _a = tslib_1.__values(tslib_1.__spread([this._testEnvAotSummaries], this._aotSummaries)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var summary = _b.value;\n                this._compiler.loadAotSummaries(summary);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n        this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n        this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n        this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n        return DynamicTestModule;\n        var e_2, _c;\n    };\n    TestBed.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n        if (this._instantiated) {\n            throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n        }\n    };\n    TestBed.prototype.get = function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n        this._initIfNeeded();\n        if (token === TestBed) {\n            return this;\n        }\n        // Tests can inject things from the ng module and from the compiler,\n        // but the ng module can't inject things from the compiler and vice versa.\n        var result = this._moduleRef.injector.get(token, UNDEFINED);\n        return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n    };\n    TestBed.prototype.execute = function (tokens, fn, context) {\n        var _this = this;\n        this._initIfNeeded();\n        var params = tokens.map(function (t) { return _this.get(t); });\n        return fn.apply(context, params);\n    };\n    TestBed.prototype.overrideModule = function (ngModule, override) {\n        this._assertNotInstantiated('overrideModule', 'override module metadata');\n        this._moduleOverrides.push([ngModule, override]);\n    };\n    TestBed.prototype.overrideComponent = function (component, override) {\n        this._assertNotInstantiated('overrideComponent', 'override component metadata');\n        this._componentOverrides.push([component, override]);\n    };\n    TestBed.prototype.overrideDirective = function (directive, override) {\n        this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n        this._directiveOverrides.push([directive, override]);\n    };\n    TestBed.prototype.overridePipe = function (pipe, override) {\n        this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n        this._pipeOverrides.push([pipe, override]);\n    };\n    TestBed.prototype.overrideProvider = function (token, provider) {\n        this.overrideProviderImpl(token, provider);\n    };\n    TestBed.prototype.deprecatedOverrideProvider = function (token, provider) {\n        this.overrideProviderImpl(token, provider, /* deprecated */ /* deprecated */ true);\n    };\n    TestBed.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n        if (deprecated === void 0) { deprecated = false; }\n        if (typeof token !== 'string' && token.ngInjectableDef &&\n            token.ngInjectableDef.providedIn === 'root') {\n            if (provider.useFactory) {\n                this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n            }\n            else {\n                this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n            }\n        }\n        var flags = 0;\n        var value;\n        if (provider.useFactory) {\n            flags |= 1024 /* TypeFactoryProvider */;\n            value = provider.useFactory;\n        }\n        else {\n            flags |= 256 /* TypeValueProvider */;\n            value = provider.useValue;\n        }\n        var deps = (provider.deps || []).map(function (dep) {\n            var depFlags = 0;\n            var depToken;\n            if (Array.isArray(dep)) {\n                dep.forEach(function (entry) {\n                    if (entry instanceof core.Optional) {\n                        depFlags |= 2 /* Optional */;\n                    }\n                    else if (entry instanceof core.SkipSelf) {\n                        depFlags |= 1 /* SkipSelf */;\n                    }\n                    else {\n                        depToken = entry;\n                    }\n                });\n            }\n            else {\n                depToken = dep;\n            }\n            return [depFlags, depToken];\n        });\n        core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n    };\n    TestBed.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n        this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n        var OverrideComponent = /** @class */ (function () {\n            function OverrideComponent() {\n            }\n            OverrideComponent.decorators = [\n                { type: core.Component, args: [{ selector: 'empty', template: template },] },\n            ];\n            /** @nocollapse */\n            OverrideComponent.ctorParameters = function () { return []; };\n            return OverrideComponent;\n        }());\n        this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n    };\n    TestBed.prototype.createComponent = function (component) {\n        var _this = this;\n        this._initIfNeeded();\n        var componentFactory = this._compiler.getComponentFactory(component);\n        if (!componentFactory) {\n            throw new Error(\"Cannot create the component \" + core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n        }\n        var noNgZone = this.get(ComponentFixtureNoNgZone, false);\n        var autoDetect = this.get(ComponentFixtureAutoDetect, false);\n        var ngZone = noNgZone ? null : this.get(core.NgZone, null);\n        var testComponentRenderer = this.get(TestComponentRenderer);\n        var rootElId = \"root\" + _nextRootElementId++;\n        testComponentRenderer.insertRootElement(rootElId);\n        var initComponent = function () {\n            var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n            return new ComponentFixture(componentRef, ngZone, autoDetect);\n        };\n        var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n        this._activeFixtures.push(fixture);\n        return fixture;\n    };\n    return TestBed;\n}());\nvar _testBed = (null);\n/**\n * @experimental\n */\nfunction getTestBed() {\n    return _testBed = _testBed || new TestBed();\n}\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @stable\n */\nfunction inject(tokens, fn) {\n    var testBed = getTestBed();\n    if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n            // the injected tokens.\n            return testBed.compileComponents().then(function () {\n                var completer = testBed.get(AsyncTestCompleter);\n                testBed.execute(tokens, fn, _this);\n                return completer.promise;\n            });\n        };\n    }\n    else {\n        // Not using an arrow function to preserve context passed from call site\n        return function () { return testBed.execute(tokens, fn, this); };\n    }\n}\n/**\n * @experimental\n */\nvar InjectSetupWrapper = /** @class */ (function () {\n    function InjectSetupWrapper(_moduleDef) {\n        this._moduleDef = _moduleDef;\n    }\n    InjectSetupWrapper.prototype._addModule = function () {\n        var moduleDef = this._moduleDef();\n        if (moduleDef) {\n            getTestBed().configureTestingModule(moduleDef);\n        }\n    };\n    InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n        var self = this;\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            self._addModule();\n            return inject(tokens, fn).call(this);\n        };\n    };\n    return InjectSetupWrapper;\n}());\nfunction withModule(moduleDef, fn) {\n    if (fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var testBed = getTestBed();\n            if (moduleDef) {\n                testBed.configureTestingModule(moduleDef);\n            }\n            return fn.apply(this);\n        };\n    }\n    return new InjectSetupWrapper(function () { return moduleDef; });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _global$1 = (typeof window === 'undefined' ? global : window);\n// Reset the test providers and the fake async zone before each test.\nif (_global$1.beforeEach) {\n    _global$1.beforeEach(function () {\n        TestBed.resetTestingModule();\n        resetFakeAsyncZone();\n    });\n}\n// TODO(juliemr): remove this, only used because we need to export something to have compilation\n// work.\nvar __core_private_testing_placeholder__ = '';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* Wraps a function in a new function which sets up document and HTML for running a test.\n*\n* This function is intended to wrap an existing testing function. The wrapper\n* adds HTML to the `body` element of the `document` and subsequently tears it down.\n*\n* This function is intended to be used with `async await` and `Promise`s. If the wrapped\n* function returns a promise (or is `async`) then the teardown is delayed until that `Promise`\n* is resolved.\n*\n* On `node` this function detects if `document` is present and if not it will create one by\n* loading `domino` and installing it.\n*\n* Example:\n*\n* ```\n* describe('something', () => {\n*   it('should do something', withBody('<my-app></my-app>', async () => {\n*     const myApp = renderComponent(MyApp);\n*     await whenRendered(myApp);\n*     expect(getRenderedText(myApp)).toEqual('Hello World!');\n*   }));\n* });\n* ```\n*\n* @param html HTML which should be inserted into `body` of the `document`.\n* @param blockFn function to wrap. The function can return promise or be `async`.\n* @experimental\n*/\nfunction withBody(html, blockFn) {\n    return function (done) {\n        ensureDocument();\n        if (typeof blockFn === 'function') {\n            document.body.innerHTML = html;\n            // TODO(i): I'm not sure why a cast is required here but otherwise I get\n            //   TS2349: Cannot invoke an expression whose type lacks a call signature. Type 'never' has\n            //   no compatible call signatures.\n            var blockReturn = blockFn();\n            if (blockReturn instanceof Promise) {\n                blockReturn = blockReturn.then(done, done.fail);\n            }\n            else {\n                done();\n            }\n        }\n    };\n}\nvar savedDocument = undefined;\nvar savedRequestAnimationFrame = undefined;\nvar savedNode = undefined;\nvar requestAnimationFrameCount = 0;\nvar ɵ0 = function (domino) {\n    if (typeof global == 'object' && global.process && typeof require == 'function') {\n        try {\n            return require(domino);\n        }\n        catch (e) {\n            // It is possible that we don't have domino available in which case just give up.\n        }\n    }\n    // Seems like we don't have domino, give up.\n    return null;\n};\n/**\n * System.js uses regexp to look for `require` statements. `domino` has to be\n * extracted into a constant so that the regexp in the System.js does not match\n * and does not try to load domino in the browser.\n */\nvar domino = (ɵ0)('domino');\n/**\n * Ensure that global has `Document` if we are in node.js\n * @experimental\n */\nfunction ensureDocument() {\n    if (domino) {\n        // we are in node.js.\n        var window_1 = domino.createWindow('', 'http://localhost');\n        savedDocument = global.document;\n        global.document = window_1.document;\n        // Trick to avoid Event patching from\n        // https://github.com/angular/angular/blob/7cf5e95ac9f0f2648beebf0d5bd9056b79946970/packages/platform-browser/src/dom/events/dom_events.ts#L112-L132\n        // It fails with Domino with TypeError: Cannot assign to read only property\n        // 'stopImmediatePropagation' of object '#<Event>'\n        // Trick to avoid Event patching from\n        // https://github.com/angular/angular/blob/7cf5e95ac9f0f2648beebf0d5bd9056b79946970/packages/platform-browser/src/dom/events/dom_events.ts#L112-L132\n        // It fails with Domino with TypeError: Cannot assign to read only property\n        // 'stopImmediatePropagation' of object '#<Event>'\n        global.Event = null;\n        savedNode = global.Node;\n        global.Node = domino.impl.Node;\n        savedRequestAnimationFrame = global.requestAnimationFrame;\n        global.requestAnimationFrame = function (cb) {\n            setImmediate(cb);\n            return requestAnimationFrameCount++;\n        };\n    }\n}\n/**\n * Restore the state of `Document` between tests.\n * @experimental\n */\nfunction cleanupDocument() {\n    if (savedDocument) {\n        global.document = savedDocument;\n        savedDocument = undefined;\n    }\n    if (savedNode) {\n        global.Node = savedNode;\n        savedNode = undefined;\n    }\n    if (savedRequestAnimationFrame) {\n        global.requestAnimationFrame = savedRequestAnimationFrame;\n        savedRequestAnimationFrame = undefined;\n    }\n}\nif (typeof beforeEach == 'function')\n    beforeEach(ensureDocument);\nif (typeof afterEach == 'function')\n    beforeEach(cleanupDocument);\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.async = async;\nexports.ComponentFixture = ComponentFixture;\nexports.resetFakeAsyncZone = resetFakeAsyncZone;\nexports.fakeAsync = fakeAsync;\nexports.tick = tick;\nexports.flush = flush;\nexports.discardPeriodicTasks = discardPeriodicTasks;\nexports.flushMicrotasks = flushMicrotasks;\nexports.TestComponentRenderer = TestComponentRenderer;\nexports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\nexports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\nexports.TestBed = TestBed;\nexports.getTestBed = getTestBed;\nexports.inject = inject;\nexports.InjectSetupWrapper = InjectSetupWrapper;\nexports.withModule = withModule;\nexports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\nexports.ɵTestingCompiler = TestingCompiler;\nexports.ɵTestingCompilerFactory = TestingCompilerFactory;\nexports.withBody = withBody;\nexports.ensureDocument = ensureDocument;\nexports.cleanupDocument = cleanupDocument;\nexports.ɵ0 = ɵ0;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}