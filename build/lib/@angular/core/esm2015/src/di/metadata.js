/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { makeParamDecorator } from '../util/decorators';
/**
 * Type of the Inject decorator / constructor function.
 *
 * \@stable
 * @record
 */
export function InjectDecorator() { }
function InjectDecorator_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    (token: any): any;
    */
    /* TODO: handle strange member:
    new (token: any): Inject;
    */
}
/**
 * Inject decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
export const /** @type {?} */ Inject = makeParamDecorator('Inject', (token) => ({ token }));
/**
 * Type of the Optional decorator / constructor function.
 *
 * \@stable
 * @record
 */
export function OptionalDecorator() { }
function OptionalDecorator_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    (): any;
    */
    /* TODO: handle strange member:
    new (): Optional;
    */
}
/**
 * Optional decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
export const /** @type {?} */ Optional = makeParamDecorator('Optional');
/**
 * Type of the Self decorator / constructor function.
 *
 * \@stable
 * @record
 */
export function SelfDecorator() { }
function SelfDecorator_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    (): any;
    */
    /* TODO: handle strange member:
    new (): Self;
    */
}
/**
 * Self decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
export const /** @type {?} */ Self = makeParamDecorator('Self');
/**
 * Type of the SkipSelf decorator / constructor function.
 *
 * \@stable
 * @record
 */
export function SkipSelfDecorator() { }
function SkipSelfDecorator_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    (): any;
    */
    /* TODO: handle strange member:
    new (): SkipSelf;
    */
}
/**
 * SkipSelf decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
export const /** @type {?} */ SkipSelf = makeParamDecorator('SkipSelf');
/**
 * Type of the Host decorator / constructor function.
 *
 * \@stable
 * @record
 */
export function HostDecorator() { }
function HostDecorator_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    (): any;
    */
    /* TODO: handle strange member:
    new (): Host;
    */
}
/**
 * Host decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
export const /** @type {?} */ Host = makeParamDecorator('Host');

//# sourceMappingURL=data:application/json;base64,