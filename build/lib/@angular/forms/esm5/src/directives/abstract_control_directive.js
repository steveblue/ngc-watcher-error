/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Base class for control directives.
 *
 * Only used internally in the forms module.
 *
 * @stable
 */
var /**
 * Base class for control directives.
 *
 * Only used internally in the forms module.
 *
 * @stable
 */
AbstractControlDirective = /** @class */ (function () {
    function AbstractControlDirective() {
    }
    Object.defineProperty(AbstractControlDirective.prototype, "value", {
        /** The value of the control. */
        get: /** The value of the control. */
        function () { return this.control ? this.control.value : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
        /**
         * A control is `valid` when its `status === VALID`.
         *
         * In order to have this status, the control must have passed all its
         * validation checks.
         */
        get: /**
           * A control is `valid` when its `status === VALID`.
           *
           * In order to have this status, the control must have passed all its
           * validation checks.
           */
        function () { return this.control ? this.control.valid : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
        /**
         * A control is `invalid` when its `status === INVALID`.
         *
         * In order to have this status, the control must have failed
         * at least one of its validation checks.
         */
        get: /**
           * A control is `invalid` when its `status === INVALID`.
           *
           * In order to have this status, the control must have failed
           * at least one of its validation checks.
           */
        function () { return this.control ? this.control.invalid : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pending", {
        /**
         * A control is `pending` when its `status === PENDING`.
         *
         * In order to have this status, the control must be in the
         * middle of conducting a validation check.
         */
        get: /**
           * A control is `pending` when its `status === PENDING`.
           *
           * In order to have this status, the control must be in the
           * middle of conducting a validation check.
           */
        function () { return this.control ? this.control.pending : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
        /**
         * A control is `disabled` when its `status === DISABLED`.
         *
         * Disabled controls are exempt from validation checks and
         * are not included in the aggregate value of their ancestor
         * controls.
         */
        get: /**
           * A control is `disabled` when its `status === DISABLED`.
           *
           * Disabled controls are exempt from validation checks and
           * are not included in the aggregate value of their ancestor
           * controls.
           */
        function () { return this.control ? this.control.disabled : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
        /**
         * A control is `enabled` as long as its `status !== DISABLED`.
         *
         * In other words, it has a status of `VALID`, `INVALID`, or
         * `PENDING`.
         */
        get: /**
           * A control is `enabled` as long as its `status !== DISABLED`.
           *
           * In other words, it has a status of `VALID`, `INVALID`, or
           * `PENDING`.
           */
        function () { return this.control ? this.control.enabled : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
        /**
         * Returns any errors generated by failing validation. If there
         * are no errors, it will return null.
         */
        get: /**
           * Returns any errors generated by failing validation. If there
           * are no errors, it will return null.
           */
        function () { return this.control ? this.control.errors : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
        /**
         * A control is `pristine` if the user has not yet changed
         * the value in the UI.
         *
         * Note that programmatic changes to a control's value will
         * *not* mark it dirty.
         */
        get: /**
           * A control is `pristine` if the user has not yet changed
           * the value in the UI.
           *
           * Note that programmatic changes to a control's value will
           * *not* mark it dirty.
           */
        function () { return this.control ? this.control.pristine : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
        /**
         * A control is `dirty` if the user has changed the value
         * in the UI.
         *
         * Note that programmatic changes to a control's value will
         * *not* mark it dirty.
         */
        get: /**
           * A control is `dirty` if the user has changed the value
           * in the UI.
           *
           * Note that programmatic changes to a control's value will
           * *not* mark it dirty.
           */
        function () { return this.control ? this.control.dirty : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
        /**
         * A control is marked `touched` once the user has triggered
         * a `blur` event on it.
         */
        get: /**
           * A control is marked `touched` once the user has triggered
           * a `blur` event on it.
           */
        function () { return this.control ? this.control.touched : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "status", {
        get: function () { return this.control ? this.control.status : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
        /**
         * A control is `untouched` if the user has not yet triggered
         * a `blur` event on it.
         */
        get: /**
           * A control is `untouched` if the user has not yet triggered
           * a `blur` event on it.
           */
        function () { return this.control ? this.control.untouched : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
        /**
         * Emits an event every time the validation status of the control
         * is re-calculated.
         */
        get: /**
           * Emits an event every time the validation status of the control
           * is re-calculated.
           */
        function () {
            return this.control ? this.control.statusChanges : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
        /**
         * Emits an event every time the value of the control changes, in
         * the UI or programmatically.
         */
        get: /**
           * Emits an event every time the value of the control changes, in
           * the UI or programmatically.
           */
        function () {
            return this.control ? this.control.valueChanges : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "path", {
        /**
         * Returns an array that represents the path from the top-level form
         * to this control. Each index is the string name of the control on
         * that level.
         */
        get: /**
           * Returns an array that represents the path from the top-level form
           * to this control. Each index is the string name of the control on
           * that level.
           */
        function () { return null; },
        enumerable: true,
        configurable: true
    });
    /**
     * Resets the form control. This means by default:
     *
     * * it is marked as `pristine`
     * * it is marked as `untouched`
     * * value is set to null
     *
     * For more information, see {@link AbstractControl}.
     */
    /**
       * Resets the form control. This means by default:
       *
       * * it is marked as `pristine`
       * * it is marked as `untouched`
       * * value is set to null
       *
       * For more information, see {@link AbstractControl}.
       */
    AbstractControlDirective.prototype.reset = /**
       * Resets the form control. This means by default:
       *
       * * it is marked as `pristine`
       * * it is marked as `untouched`
       * * value is set to null
       *
       * For more information, see {@link AbstractControl}.
       */
    function (value) {
        if (value === void 0) { value = undefined; }
        if (this.control)
            this.control.reset(value);
    };
    /**
     * Returns true if the control with the given path has the error specified. Otherwise
     * returns false.
     *
     * If no path is given, it checks for the error on the present control.
     */
    /**
       * Returns true if the control with the given path has the error specified. Otherwise
       * returns false.
       *
       * If no path is given, it checks for the error on the present control.
       */
    AbstractControlDirective.prototype.hasError = /**
       * Returns true if the control with the given path has the error specified. Otherwise
       * returns false.
       *
       * If no path is given, it checks for the error on the present control.
       */
    function (errorCode, path) {
        return this.control ? this.control.hasError(errorCode, path) : false;
    };
    /**
     * Returns error data if the control with the given path has the error specified. Otherwise
     * returns null or undefined.
     *
     * If no path is given, it checks for the error on the present control.
     */
    /**
       * Returns error data if the control with the given path has the error specified. Otherwise
       * returns null or undefined.
       *
       * If no path is given, it checks for the error on the present control.
       */
    AbstractControlDirective.prototype.getError = /**
       * Returns error data if the control with the given path has the error specified. Otherwise
       * returns null or undefined.
       *
       * If no path is given, it checks for the error on the present control.
       */
    function (errorCode, path) {
        return this.control ? this.control.getError(errorCode, path) : null;
    };
    return AbstractControlDirective;
}());
/**
 * Base class for control directives.
 *
 * Only used internally in the forms module.
 *
 * @stable
 */
export { AbstractControlDirective };

//# sourceMappingURL=data:application/json;base64,