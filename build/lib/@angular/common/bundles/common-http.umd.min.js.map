{"version":3,"sources":["packages/common/common-http.umd.js"],"names":["global","factory","exports","module","require","define","amd","npm_package","ng","core","rxjs","operators","tslib","common","this","tslib_1","HttpHandler","HttpBackend","HttpHeaders","headers","_this","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name_1","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","name","values","length","prototype","init","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","apply","__spread","toDelete_1","existing","filter","fn","HttpUrlEncodingCodec","encodeKey","k","standardEncoding","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","encodeURIComponent","replace","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","map","paramParser","rawParams","codec","map$$1","param","eqIdx","_a","__read","val","list","isArray","res","toString","eKey","join","base_1","idx","splice","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpEventType","HttpRequest","method","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","mightHaveBody","params","urlWithParams","qIdx","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","_super","call","ResponseHeader","__extends","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","of","pipe","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","post","put","decorators","Injectable","ctorParameters","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","InjectionToken","NoopInterceptor","nextRequestId","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","nextCallback","Observable","observer","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","complete","onError","addEventListener","appendChild","Sent","removeEventListener","Inject","args","DOCUMENT","JsonpInterceptor","XSSI_PREFIX","XhrFactory","BrowserXhr","build","XMLHttpRequest","HttpXhrBackend","xhrFactory","xhr","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","getAllResponseHeaders","getResponseUrl","responseURL","test","getResponseHeader","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","abort","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","PLATFORM_ID","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","token","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","Injector","jsonpCallbackContext","window","HttpClientXsrfModule","disable","ngModule","providers","provide","useClass","withOptions","useValue","NgModule","useExisting","multi","HttpClientModule","imports","HttpClientJsonpModule","useFactory","ɵangular_packages_common_http_http_a","ɵangular_packages_common_http_http_b","ɵangular_packages_common_http_http_c","ɵangular_packages_common_http_http_d","ɵangular_packages_common_http_http_e","ɵangular_packages_common_http_http_h","ɵangular_packages_common_http_http_i","ɵangular_packages_common_http_http_f","ɵangular_packages_common_http_http_g","ɵinterceptingHandler","interceptingHandler","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.0.0-rc.1\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('tslib'), require('@angular/common')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs', 'rxjs/operators', 'tslib', '@angular/common'], factory) :\n\t(factory((global.npm_package = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.tslib,global.ng.common));\n}(this, (function (exports,core,rxjs,operators,tslib_1,common) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @stable\n */\nvar HttpHandler = /** @class */ (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @stable\n */\nvar HttpBackend = /** @class */ (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n * @stable\n */\nvar HttpHeaders = /** @class */ (function () {\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n           * Internal map of lowercased header names to the normalized\n           * form of the name (the form seen first).\n           */\n        this.normalizedNames = new Map();\n        /**\n           * Queued updates to be materialized the next initialization.\n           */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var index = line.indexOf(':');\n                    if (index > 0) {\n                        var name_1 = line.slice(0, index);\n                        var key = name_1.toLowerCase();\n                        var value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            _this.headers.get(key).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var values = headers[name];\n                    var key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n       * Checks for existence of header by given name.\n       */\n    HttpHeaders.prototype.has = /**\n       * Checks for existence of header by given name.\n       */\n    function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n       * Returns first header that matches given name.\n       */\n    HttpHeaders.prototype.get = /**\n       * Returns first header that matches given name.\n       */\n    function (name) {\n        this.init();\n        var values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n       * Returns the names of the headers\n       */\n    HttpHeaders.prototype.keys = /**\n       * Returns the names of the headers\n       */\n    function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n       * Returns list of header values for a given name.\n       */\n    HttpHeaders.prototype.getAll = /**\n       * Returns list of header values for a given name.\n       */\n    function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    HttpHeaders.prototype.append = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    HttpHeaders.prototype.set = function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    HttpHeaders.prototype.delete = function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    HttpHeaders.prototype.maybeSetNormalizedName = function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    HttpHeaders.prototype.init = function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    HttpHeaders.prototype.copyFrom = function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, (other.headers.get(key)));\n            _this.normalizedNames.set(key, (other.normalizedNames.get(key)));\n        });\n    };\n    HttpHeaders.prototype.clone = function (update) {\n        var clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    HttpHeaders.prototype.applyUpdate = function (update) {\n        var key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var value = (update.value);\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, tslib_1.__spread(value));\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var toDelete_1 = update.value;\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    /**\n       * @internal\n       */\n    HttpHeaders.prototype.forEach = /**\n       * @internal\n       */\n    function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn((_this.normalizedNames.get(key)), (_this.headers.get(key))); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * @stable\n */\nvar HttpUrlEncodingCodec = /** @class */ (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    HttpUrlEncodingCodec.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    HttpUrlEncodingCodec.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    HttpUrlEncodingCodec.prototype.decodeKey = function (k) { return decodeURIComponent(k); };\n    HttpUrlEncodingCodec.prototype.decodeValue = function (v) { return decodeURIComponent(v); };\n    return HttpUrlEncodingCodec;\n}());\nfunction paramParser(rawParams, codec) {\n    var map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var params = rawParams.split('&');\n        params.forEach(function (param) {\n            var eqIdx = param.indexOf('=');\n            var _a = tslib_1.__read(eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], 2), key = _a[0], val = _a[1];\n            var list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * @stable\n */\nvar HttpParams = /** @class */ (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = {}; }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var value = options.fromObject[key];\n                _this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    /**\n       * Check whether the body has one or more values for the given parameter name.\n       */\n    HttpParams.prototype.has = /**\n       * Check whether the body has one or more values for the given parameter name.\n       */\n    function (param) {\n        this.init();\n        return this.map.has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    /**\n       * Get the first value for the given parameter name, or `null` if it's not present.\n       */\n    HttpParams.prototype.get = /**\n       * Get the first value for the given parameter name, or `null` if it's not present.\n       */\n    function (param) {\n        this.init();\n        var res = this.map.get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    /**\n       * Get all values for the given parameter name, or `null` if it's not present.\n       */\n    HttpParams.prototype.getAll = /**\n       * Get all values for the given parameter name, or `null` if it's not present.\n       */\n    function (param) {\n        this.init();\n        return this.map.get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    /**\n       * Get all the parameter names for this body.\n       */\n    HttpParams.prototype.keys = /**\n       * Get all the parameter names for this body.\n       */\n    function () {\n        this.init();\n        return Array.from(this.map.keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    /**\n       * Construct a new body with an appended value for the given parameter name.\n       */\n    HttpParams.prototype.append = /**\n       * Construct a new body with an appended value for the given parameter name.\n       */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    /**\n       * Construct a new body with a new value for the given parameter name.\n       */\n    HttpParams.prototype.set = /**\n       * Construct a new body with a new value for the given parameter name.\n       */\n    function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    /**\n       * Construct a new body with either the given value for the given parameter\n       * removed, if a value is given, or all values for the given parameter removed\n       * if not.\n       */\n    HttpParams.prototype.delete = /**\n       * Construct a new body with either the given value for the given parameter\n       * removed, if a value is given, or all values for the given parameter removed\n       * if not.\n       */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    /**\n       * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n       * separated by `&`s.\n       */\n    HttpParams.prototype.toString = /**\n       * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n       * separated by `&`s.\n       */\n    function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var eKey = _this.encoder.encodeKey(key);\n            return _this.map.get(key).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); })\n                .join('&');\n        })\n            .join('&');\n    };\n    HttpParams.prototype.clone = function (update) {\n        var clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    HttpParams.prototype.init = function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return _this.map.set(key, (_this.cloneFrom.map.get(key))); });\n            this.updates.forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var base = (update.op === 'a' ? _this.map.get(update.param) : undefined) || [];\n                        base.push((update.value));\n                        _this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var base_1 = _this.map.get(update.param) || [];\n                            var idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                _this.map.set(update.param, base_1);\n                            }\n                            else {\n                                _this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            _this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @stable\n */\nvar HttpRequest = /** @class */ (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n           * The request body, or `null` if one isn't set.\n           *\n           * Bodies are not enforced to be immutable, as they can include a reference to any\n           * user-defined data type. However, interceptors should take care to preserve\n           * idempotence by treating them as such.\n           */\n        this.body = null;\n        /**\n           * Whether this request should be made in a way that exposes progress events.\n           *\n           * Progress events are expensive (change detection runs on each event) and so\n           * they should only be requested if the consumer intends to monitor them.\n           */\n        this.reportProgress = false;\n        /**\n           * Whether this request should be sent with outgoing credentials (cookies).\n           */\n        this.withCredentials = false;\n        /**\n           * The expected response type of the server.\n           *\n           * This is used to parse the response appropriately before returning it to\n           * the requestee.\n           */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    /**\n       * Transform the free-form body into a serialized format suitable for\n       * transmission to the server.\n       */\n    HttpRequest.prototype.serializeBody = /**\n       * Transform the free-form body into a serialized format suitable for\n       * transmission to the server.\n       */\n    function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    /**\n       * Examine the body and attempt to infer an appropriate MIME type\n       * for it.\n       *\n       * If no such type can be inferred, this method will return `null`.\n       */\n    HttpRequest.prototype.detectContentTypeHeader = /**\n       * Examine the body and attempt to infer an appropriate MIME type\n       * for it.\n       *\n       * If no such type can be inferred, this method will return `null`.\n       */\n    function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    HttpRequest.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var method = update.method || this.method;\n        var url = update.url || this.url;\n        var responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var headers = update.headers || this.headers;\n        var params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, update.setHeaders[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, update.setParams[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @stable\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @stable\n */\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @stable\n */\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(exports.HttpEventType || (exports.HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @stable\n */\nvar HttpResponseBase = /** @class */ (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @stable\n */\nvar HttpHeaderResponse = /** @class */ (function (_super) {\n    tslib_1.__extends(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = exports.HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    /**\n       * Copy this `HttpHeaderResponse`, overriding its contents with the\n       * given parameter hash.\n       */\n    HttpHeaderResponse.prototype.clone = /**\n       * Copy this `HttpHeaderResponse`, overriding its contents with the\n       * given parameter hash.\n       */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @stable\n */\nvar HttpResponse = /** @class */ (function (_super) {\n    tslib_1.__extends(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = exports.HttpEventType.Response;\n        _this.body = init.body !== undefined ? init.body : null;\n        return _this;\n    }\n    HttpResponse.prototype.clone = function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @stable\n */\nvar HttpErrorResponse = /** @class */ (function (_super) {\n    tslib_1.__extends(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n           * Errors are never okay, even when the status code is in the 2xx success range.\n           */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n * @stable\n */\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     */\n    /**\n       * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n       * fires the request through the chain of registered interceptors and on to the\n       * server.\n       *\n       * This method can be called in one of two ways. Either an `HttpRequest`\n       * instance can be passed directly as the only parameter, or a method can be\n       * passed as the first parameter, a string URL as the second, and an\n       * options hash as the third.\n       *\n       * If a `HttpRequest` object is passed directly, an `Observable` of the\n       * raw `HttpEvent` stream will be returned.\n       *\n       * If a request is instead built by providing a URL, the options object\n       * determines the return type of `request()`. In addition to configuring\n       * request parameters such as the outgoing headers and/or the body, the options\n       * hash specifies two key pieces of information about the request: the\n       * `responseType` and what to `observe`.\n       *\n       * The `responseType` value determines how a successful response body will be\n       * parsed. If `responseType` is the default `json`, a type interface for the\n       * resulting object may be passed as a type parameter to `request()`.\n       *\n       * The `observe` value determines the return type of `request()`, based on what\n       * the consumer is interested in observing. A value of `events` will return an\n       * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n       * including progress events by default. A value of `response` will return an\n       * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n       * depends on the `responseType` and any optionally provided type parameter.\n       * A value of `body` will return an `Observable<T>` with the same `T` body type.\n       */\n    HttpClient.prototype.request = /**\n       * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n       * fires the request through the chain of registered interceptors and on to the\n       * server.\n       *\n       * This method can be called in one of two ways. Either an `HttpRequest`\n       * instance can be passed directly as the only parameter, or a method can be\n       * passed as the first parameter, a string URL as the second, and an\n       * options hash as the third.\n       *\n       * If a `HttpRequest` object is passed directly, an `Observable` of the\n       * raw `HttpEvent` stream will be returned.\n       *\n       * If a request is instead built by providing a URL, the options object\n       * determines the return type of `request()`. In addition to configuring\n       * request parameters such as the outgoing headers and/or the body, the options\n       * hash specifies two key pieces of information about the request: the\n       * `responseType` and what to `observe`.\n       *\n       * The `responseType` value determines how a successful response body will be\n       * parsed. If `responseType` is the default `json`, a type interface for the\n       * resulting object may be passed as a type parameter to `request()`.\n       *\n       * The `observe` value determines the return type of `request()`, based on what\n       * the consumer is interested in observing. A value of `events` will return an\n       * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n       * including progress events by default. A value of `response` will return an\n       * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n       * depends on the `responseType` and any optionally provided type parameter.\n       * A value of `body` will return an `Observable<T>` with the same `T` body type.\n       */\n    function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            // Figure out the headers.\n            var headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            var params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, (url), (options.body !== undefined ? options.body : null), {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var events$ = rxjs.of(req).pipe(operators.concatMap(function (req) { return _this.handler.handle(req); }));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var res$ = events$.pipe(operators.filter(function (event) { return event instanceof HttpResponse; }));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(operators.map(function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(operators.map(function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(operators.map(function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(operators.map(function (res) { return res.body; }));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     */\n    /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * DELETE request to be executed on the server. See the individual overloads for\n       * details of `delete()`'s return type based on the provided options.\n       */\n    HttpClient.prototype.delete = /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * DELETE request to be executed on the server. See the individual overloads for\n       * details of `delete()`'s return type based on the provided options.\n       */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     */\n    /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * GET request to be executed on the server. See the individual overloads for\n       * details of `get()`'s return type based on the provided options.\n       */\n    HttpClient.prototype.get = /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * GET request to be executed on the server. See the individual overloads for\n       * details of `get()`'s return type based on the provided options.\n       */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     */\n    /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * HEAD request to be executed on the server. See the individual overloads for\n       * details of `head()`'s return type based on the provided options.\n       */\n    HttpClient.prototype.head = /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * HEAD request to be executed on the server. See the individual overloads for\n       * details of `head()`'s return type based on the provided options.\n       */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     */\n    /**\n       * Constructs an `Observable` which, when subscribed, will cause a request\n       * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n       *\n       * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n       * If no such interceptor is reached, then the `JSONP` request will likely be\n       * rejected by the configured backend.\n       */\n    HttpClient.prototype.jsonp = /**\n       * Constructs an `Observable` which, when subscribed, will cause a request\n       * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n       *\n       * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n       * If no such interceptor is reached, then the `JSONP` request will likely be\n       * rejected by the configured backend.\n       */\n    function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     */\n    /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * OPTIONS request to be executed on the server. See the individual overloads for\n       * details of `options()`'s return type based on the provided options.\n       */\n    HttpClient.prototype.options = /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * OPTIONS request to be executed on the server. See the individual overloads for\n       * details of `options()`'s return type based on the provided options.\n       */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, options);\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     */\n    /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * PATCH request to be executed on the server. See the individual overloads for\n       * details of `patch()`'s return type based on the provided options.\n       */\n    HttpClient.prototype.patch = /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * PATCH request to be executed on the server. See the individual overloads for\n       * details of `patch()`'s return type based on the provided options.\n       */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * POST request to be executed on the server. See the individual overloads for\n       * details of `post()`'s return type based on the provided options.\n       */\n    HttpClient.prototype.post = /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * POST request to be executed on the server. See the individual overloads for\n       * details of `post()`'s return type based on the provided options.\n       */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * POST request to be executed on the server. See the individual overloads for\n       * details of `post()`'s return type based on the provided options.\n       */\n    HttpClient.prototype.put = /**\n       * Constructs an `Observable` which, when subscribed, will cause the configured\n       * POST request to be executed on the server. See the individual overloads for\n       * details of `post()`'s return type based on the provided options.\n       */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    HttpClient.ctorParameters = function () { return [\n        { type: HttpHandler, },\n    ]; };\n    return HttpClient;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n * @stable\n */\nvar HttpInterceptorHandler = /** @class */ (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    HttpInterceptorHandler.prototype.handle = function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * @stable\n */\nvar HTTP_INTERCEPTORS = new core.InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = /** @class */ (function () {\n    function NoopInterceptor() {\n    }\n    NoopInterceptor.prototype.intercept = function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    NoopInterceptor.ctorParameters = function () { return []; };\n    return NoopInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n * @stable\n */\nvar JsonpCallbackContext = /** @class */ (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * @stable\n */\nvar JsonpClientBackend = /** @class */ (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    /**\n       * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n       */\n    JsonpClientBackend.prototype.nextCallback = /**\n       * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n       */\n    function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    /**\n       * Process a JSONP request and return an event stream of the results.\n       */\n    JsonpClientBackend.prototype.handle = /**\n       * Process a JSONP request and return an event stream of the results.\n       */\n    function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new rxjs.Observable(function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var callback = _this.nextCallback();\n            var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var body = null;\n            // Whether the response callback has been called.\n            var finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the response is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: exports.HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    JsonpClientBackend.ctorParameters = function () { return [\n        { type: JsonpCallbackContext, },\n        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },\n    ]; };\n    return JsonpClientBackend;\n}());\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @stable\n */\nvar JsonpInterceptor = /** @class */ (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    JsonpInterceptor.prototype.intercept = function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    JsonpInterceptor.ctorParameters = function () { return [\n        { type: JsonpClientBackend, },\n    ]; };\n    return JsonpInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @stable\n */\nvar XhrFactory = /** @class */ (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for @{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n * @stable\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n    BrowserXhr.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n * @stable\n */\nvar HttpXhrBackend = /** @class */ (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    /**\n       * Process a request and return a stream of response events.\n       */\n    HttpXhrBackend.prototype.handle = /**\n       * Process a request and return a stream of response events.\n       */\n    function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new rxjs.Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var status = xhr.status === 1223 ? 204 : xhr.status;\n                var statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    var originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error: error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var onError = function (error) {\n                var res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var progressEvent = {\n                    type: exports.HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var progress = {\n                    type: exports.HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: exports.HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    HttpXhrBackend.ctorParameters = function () { return [\n        { type: XhrFactory, },\n    ]; };\n    return HttpXhrBackend;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new core.InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new core.InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @stable\n */\nvar HttpXsrfTokenExtractor = /** @class */ (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /** @class */ (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n           * @internal for testing\n           */\n        this.parseCount = 0;\n    }\n    HttpXsrfCookieExtractor.prototype.getToken = function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = common.ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    HttpXsrfCookieExtractor.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },\n        { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },\n        { type: undefined, decorators: [{ type: core.Inject, args: [XSRF_COOKIE_NAME,] },] },\n    ]; };\n    return HttpXsrfCookieExtractor;\n}());\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /** @class */ (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    HttpXsrfInterceptor.prototype.intercept = function (req, next) {\n        var lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    HttpXsrfInterceptor.ctorParameters = function () { return [\n        { type: HttpXsrfTokenExtractor, },\n        { type: undefined, decorators: [{ type: core.Inject, args: [XSRF_HEADER_NAME,] },] },\n    ]; };\n    return HttpXsrfInterceptor;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n */\nvar HttpInterceptingHandler = /** @class */ (function () {\n    function HttpInterceptingHandler(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    HttpInterceptingHandler.prototype.handle = function (req) {\n        if (this.chain === null) {\n            var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);\n        }\n        return this.chain.handle(req);\n    };\n    HttpInterceptingHandler.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    HttpInterceptingHandler.ctorParameters = function () { return [\n        { type: HttpBackend, },\n        { type: core.Injector, },\n    ]; };\n    return HttpInterceptingHandler;\n}());\n/**\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * Meant to be used as a factory function within `HttpClientModule`.\n *\n * @stable\n */\nfunction interceptingHandler(backend, interceptors) {\n    if (interceptors === void 0) { interceptors = []; }\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n * @stable\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * `NgModule` which adds XSRF protection support to outgoing requests.\n *\n * Provided the server supports a cookie-based XSRF protection system, this\n * module can be used directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\n * the header name and `XSRF-TOKEN` for the cookie name.\n *\n * @stable\n */\nvar HttpClientXsrfModule = /** @class */ (function () {\n    function HttpClientXsrfModule() {\n    }\n    /**\n     * Disable the default XSRF protection.\n     */\n    /**\n       * Disable the default XSRF protection.\n       */\n    HttpClientXsrfModule.disable = /**\n       * Disable the default XSRF protection.\n       */\n    function () {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     */\n    /**\n       * Configure XSRF protection to use the given cookie name or header name,\n       * or the default names (as described above) if not provided.\n       */\n    HttpClientXsrfModule.withOptions = /**\n       * Configure XSRF protection to use the given cookie name or header name,\n       * or the default names (as described above) if not provided.\n       */\n    function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    HttpClientXsrfModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    HttpClientXsrfModule.ctorParameters = function () { return []; };\n    return HttpClientXsrfModule;\n}());\n/**\n * `NgModule` which provides the `HttpClient` and associated services.\n *\n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n *\n * @stable\n */\nvar HttpClientModule = /** @class */ (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule.decorators = [\n        { type: core.NgModule, args: [{\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    providers: [\n                        HttpClient,\n                        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                        BrowserXhr,\n                        { provide: XhrFactory, useExisting: BrowserXhr },\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    HttpClientModule.ctorParameters = function () { return []; };\n    return HttpClientModule;\n}());\n/**\n * `NgModule` which enables JSONP support in `HttpClient`.\n *\n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n *\n * @stable\n */\nvar HttpClientJsonpModule = /** @class */ (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                },] }\n    ];\n    /** @nocollapse */\n    HttpClientJsonpModule.ctorParameters = function () { return []; };\n    return HttpClientJsonpModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.ɵangular_packages_common_http_http_a = NoopInterceptor;\nexports.ɵangular_packages_common_http_http_b = JsonpCallbackContext;\nexports.ɵangular_packages_common_http_http_c = HttpInterceptingHandler;\nexports.ɵangular_packages_common_http_http_d = jsonpCallbackContext;\nexports.ɵangular_packages_common_http_http_e = BrowserXhr;\nexports.ɵangular_packages_common_http_http_h = HttpXsrfCookieExtractor;\nexports.ɵangular_packages_common_http_http_i = HttpXsrfInterceptor;\nexports.ɵangular_packages_common_http_http_f = XSRF_COOKIE_NAME;\nexports.ɵangular_packages_common_http_http_g = XSRF_HEADER_NAME;\nexports.HttpBackend = HttpBackend;\nexports.HttpHandler = HttpHandler;\nexports.HttpClient = HttpClient;\nexports.HttpHeaders = HttpHeaders;\nexports.HTTP_INTERCEPTORS = HTTP_INTERCEPTORS;\nexports.JsonpClientBackend = JsonpClientBackend;\nexports.JsonpInterceptor = JsonpInterceptor;\nexports.HttpClientJsonpModule = HttpClientJsonpModule;\nexports.HttpClientModule = HttpClientModule;\nexports.HttpClientXsrfModule = HttpClientXsrfModule;\nexports.ɵinterceptingHandler = interceptingHandler;\nexports.HttpParams = HttpParams;\nexports.HttpUrlEncodingCodec = HttpUrlEncodingCodec;\nexports.HttpRequest = HttpRequest;\nexports.HttpErrorResponse = HttpErrorResponse;\nexports.HttpHeaderResponse = HttpHeaderResponse;\nexports.HttpResponse = HttpResponse;\nexports.HttpResponseBase = HttpResponseBase;\nexports.HttpXhrBackend = HttpXhrBackend;\nexports.XhrFactory = XhrFactory;\nexports.HttpXsrfTokenExtractor = HttpXsrfTokenExtractor;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=common-http.umd.js.map\n"]}