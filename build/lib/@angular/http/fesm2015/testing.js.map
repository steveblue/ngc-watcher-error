{"version":3,"file":"testing.js","sources":["../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/http/npm_package.es6/packages/http/testing/src/mock_backend.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/http/npm_package.es6/packages/http/testing/src/testing.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/http/npm_package.es6/packages/http/testing/public_api.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/http/npm_package.es6/packages/http/testing/index.js","../../../../../../../../../../execroot/angular/bazel-out/darwin-fastbuild/bin/packages/http/npm_package.es6/packages/http/testing/testing.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '@angular/core';\nimport { ReadyState, Request } from '@angular/http';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n/**\n *\n * Mock Connection to represent a {\\@link Connection} for tests.\n *\n * @deprecated use \\@angular/common/http instead\n */\nexport class MockConnection {\n    /**\n     * @param {?} req\n     */\n    constructor(req) {\n        this.response = /** @type {?} */ (new ReplaySubject(1).pipe(take(1)));\n        this.readyState = ReadyState.Open;\n        this.request = req;\n    }\n    /**\n     * Sends a mock response to the connection. This response is the value that is emitted to the\n     * {\\@link EventEmitter} returned by {\\@link Http}.\n     *\n     * ### Example\n     *\n     * ```\n     * var connection;\n     * backend.connections.subscribe(c => connection = c);\n     * http.request('data.json').subscribe(res => console.log(res.text()));\n     * connection.mockRespond(new Response(new ResponseOptions({ body: 'fake response' }))); //logs\n     * 'fake response'\n     * ```\n     *\n     * @param {?} res\n     * @return {?}\n     */\n    mockRespond(res) {\n        if (this.readyState === ReadyState.Done || this.readyState === ReadyState.Cancelled) {\n            throw new Error('Connection has already been resolved');\n        }\n        this.readyState = ReadyState.Done;\n        this.response.next(res);\n        this.response.complete();\n    }\n    /**\n     * Not yet implemented!\n     *\n     * Sends the provided {\\@link Response} to the `downloadObserver` of the `Request`\n     * associated with this connection.\n     * @param {?} res\n     * @return {?}\n     */\n    mockDownload(res) {\n        // this.request.downloadObserver.onNext(res);\n        // if (res.bytesLoaded === res.totalBytes) {\n        //   this.request.downloadObserver.onCompleted();\n        // }\n    }\n    /**\n     * Emits the provided error object as an error to the {\\@link Response} {\\@link EventEmitter}\n     * returned\n     * from {\\@link Http}.\n     *\n     * ### Example\n     *\n     * ```\n     * var connection;\n     * backend.connections.subscribe(c => connection = c);\n     * http.request('data.json').subscribe(res => res, err => console.log(err)));\n     * connection.mockError(new Error('error'));\n     * ```\n     *\n     * @param {?=} err\n     * @return {?}\n     */\n    mockError(err) {\n        // Matches ResourceLoader semantics\n        this.readyState = ReadyState.Done;\n        this.response.error(err);\n    }\n}\nfunction MockConnection_tsickle_Closure_declarations() {\n    /**\n     * Describes the state of the connection, based on `XMLHttpRequest.readyState`, but with\n     * additional states. For example, state 5 indicates an aborted connection.\n     * @type {?}\n     */\n    MockConnection.prototype.readyState;\n    /**\n     * {\\@link Request} instance used to create the connection.\n     * @type {?}\n     */\n    MockConnection.prototype.request;\n    /**\n     * {\\@link EventEmitter} of {\\@link Response}. Can be subscribed to in order to be notified when a\n     * response is available.\n     * @type {?}\n     */\n    MockConnection.prototype.response;\n}\n/**\n * A mock backend for testing the {\\@link Http} service.\n *\n * This class can be injected in tests, and should be used to override providers\n * to other backends, such as {\\@link XHRBackend}.\n *\n * ### Example\n *\n * ```\n * import {Injectable, Injector} from '\\@angular/core';\n * import {async, fakeAsync, tick} from '\\@angular/core/testing';\n * import {BaseRequestOptions, ConnectionBackend, Http, RequestOptions} from '\\@angular/http';\n * import {Response, ResponseOptions} from '\\@angular/http';\n * import {MockBackend, MockConnection} from '\\@angular/http/testing';\n *\n * const HERO_ONE = 'HeroNrOne';\n * const HERO_TWO = 'WillBeAlwaysTheSecond';\n *\n * \\@Injectable()\n * class HeroService {\n *   constructor(private http: Http) {}\n *\n *   getHeroes(): Promise<String[]> {\n *     return this.http.get('myservices.de/api/heroes')\n *         .toPromise()\n *         .then(response => response.json().data)\n *         .catch(e => this.handleError(e));\n *   }\n *\n *   private handleError(error: any): Promise<any> {\n *     console.error('An error occurred', error);\n *     return Promise.reject(error.message || error);\n *   }\n * }\n *\n * describe('MockBackend HeroService Example', () => {\n *   beforeEach(() => {\n *     this.injector = Injector.create([\n *       {provide: ConnectionBackend, useClass: MockBackend},\n *       {provide: RequestOptions, useClass: BaseRequestOptions},\n *       Http,\n *       HeroService,\n *     ]);\n *     this.heroService = this.injector.get(HeroService);\n *     this.backend = this.injector.get(ConnectionBackend) as MockBackend;\n *     this.backend.connections.subscribe((connection: any) => this.lastConnection = connection);\n *   });\n *\n *   it('getHeroes() should query current service url', () => {\n *     this.heroService.getHeroes();\n *     expect(this.lastConnection).toBeDefined('no http service connection at all?');\n *     expect(this.lastConnection.request.url).toMatch(/api\\/heroes$/, 'url invalid');\n *   });\n *\n *   it('getHeroes() should return some heroes', fakeAsync(() => {\n *        let result: String[];\n *        this.heroService.getHeroes().then((heroes: String[]) => result = heroes);\n *        this.lastConnection.mockRespond(new Response(new ResponseOptions({\n *          body: JSON.stringify({data: [HERO_ONE, HERO_TWO]}),\n *        })));\n *        tick();\n *        expect(result.length).toEqual(2, 'should contain given amount of heroes');\n *        expect(result[0]).toEqual(HERO_ONE, ' HERO_ONE should be the first hero');\n *        expect(result[1]).toEqual(HERO_TWO, ' HERO_TWO should be the second hero');\n *      }));\n *\n *   it('getHeroes() while server is down', fakeAsync(() => {\n *        let result: String[];\n *        let catchedError: any;\n *        this.heroService.getHeroes()\n *            .then((heroes: String[]) => result = heroes)\n *            .catch((error: any) => catchedError = error);\n *        this.lastConnection.mockRespond(new Response(new ResponseOptions({\n *          status: 404,\n *          statusText: 'URL not Found',\n *        })));\n *        tick();\n *        expect(result).toBeUndefined();\n *        expect(catchedError).toBeDefined();\n *      }));\n * });\n * ```\n *\n * This method only exists in the mock implementation, not in real Backends.\n *\n * @deprecated use \\@angular/common/http instead\n */\nexport class MockBackend {\n    constructor() {\n        this.connectionsArray = [];\n        this.connections = new Subject();\n        this.connections.subscribe((connection) => this.connectionsArray.push(connection));\n        this.pendingConnections = new Subject();\n    }\n    /**\n     * Checks all connections, and raises an exception if any connection has not received a response.\n     *\n     * This method only exists in the mock implementation, not in real Backends.\n     * @return {?}\n     */\n    verifyNoPendingRequests() {\n        let /** @type {?} */ pending = 0;\n        this.pendingConnections.subscribe((c) => pending++);\n        if (pending > 0)\n            throw new Error(`${pending} pending connections to be resolved`);\n    }\n    /**\n     * Can be used in conjunction with `verifyNoPendingRequests` to resolve any not-yet-resolve\n     * connections, if it's expected that there are connections that have not yet received a response.\n     *\n     * This method only exists in the mock implementation, not in real Backends.\n     * @return {?}\n     */\n    resolveAllConnections() { this.connections.subscribe((c) => c.readyState = 4); }\n    /**\n     * Creates a new {\\@link MockConnection}. This is equivalent to calling `new\n     * MockConnection()`, except that it also will emit the new `Connection` to the `connections`\n     * emitter of this `MockBackend` instance. This method will usually only be used by tests\n     * against the framework itself, not by end-users.\n     * @param {?} req\n     * @return {?}\n     */\n    createConnection(req) {\n        if (!req || !(req instanceof Request)) {\n            throw new Error(`createConnection requires an instance of Request, got ${req}`);\n        }\n        const /** @type {?} */ connection = new MockConnection(req);\n        this.connections.next(connection);\n        return connection;\n    }\n}\nMockBackend.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMockBackend.ctorParameters = () => [];\nfunction MockBackend_tsickle_Closure_declarations() {\n    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n    MockBackend.decorators;\n    /**\n     * @nocollapse\n     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n     */\n    MockBackend.ctorParameters;\n    /**\n     * {\\@link EventEmitter}\n     * of {\\@link MockConnection} instances that have been created by this backend. Can be subscribed\n     * to in order to respond to connections.\n     *\n     * ### Example\n     *\n     * ```\n     * import {Injector} from '\\@angular/core';\n     * import {fakeAsync, tick} from '\\@angular/core/testing';\n     * import {BaseRequestOptions, ConnectionBackend, Http, RequestOptions} from '\\@angular/http';\n     * import {Response, ResponseOptions} from '\\@angular/http';\n     * import {MockBackend, MockConnection} from '\\@angular/http/testing';\n     *\n     * it('should get a response', fakeAsync(() => {\n     *      let connection:\n     *          MockConnection;  // this will be set when a new connection is emitted from the\n     *                           // backend.\n     *      let text: string;    // this will be set from mock response\n     *      let injector = Injector.create([\n     *        {provide: ConnectionBackend, useClass: MockBackend},\n     *        {provide: RequestOptions, useClass: BaseRequestOptions},\n     *        Http,\n     *      ]);\n     *      let backend = injector.get(ConnectionBackend);\n     *      let http = injector.get(Http);\n     *      backend.connections.subscribe((c: MockConnection) => connection = c);\n     *      http.request('something.json').toPromise().then((res: any) => text = res.text());\n     *      connection.mockRespond(new Response(new ResponseOptions({body: 'Something'})));\n     *      tick();\n     *      expect(text).toBe('Something');\n     *    }));\n     * ```\n     *\n     * This property only exists in the mock implementation, not in real Backends.\n     * @type {?}\n     */\n    MockBackend.prototype.connections;\n    /**\n     * An array representation of `connections`. This array will be updated with each connection that\n     * is created by this backend.\n     *\n     * This property only exists in the mock implementation, not in real Backends.\n     * @type {?}\n     */\n    MockBackend.prototype.connectionsArray;\n    /**\n     * {\\@link EventEmitter} of {\\@link MockConnection} instances that haven't yet been resolved (i.e.\n     * with a `readyState`\n     * less than 4). Used internally to verify that no connections are pending via the\n     * `verifyNoPendingRequests` method.\n     *\n     * This property only exists in the mock implementation, not in real Backends.\n     * @type {?}\n     */\n    MockBackend.prototype.pendingConnections;\n}\n\n//# sourceMappingURL=data:application/json;base64,","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-server/testing package.\n */\nexport { MockConnection, MockBackend } from './mock_backend';\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2h0dHAvdGVzdGluZy9zcmMvdGVzdGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBYUEsNENBQWMsZ0JBQWdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQG1vZHVsZVxuICogQGRlc2NyaXB0aW9uXG4gKiBFbnRyeSBwb2ludCBmb3IgYWxsIHB1YmxpYyBBUElzIG9mIHRoZSBwbGF0Zm9ybS1zZXJ2ZXIvdGVzdGluZyBwYWNrYWdlLlxuICovXG5leHBvcnQgKiBmcm9tICcuL21vY2tfYmFja2VuZCc7XG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport { MockConnection, MockBackend } from './src/testing';\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2h0dHAvdGVzdGluZy9wdWJsaWNfYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFhQSw0Q0FBYyxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQG1vZHVsZVxuICogQGRlc2NyaXB0aW9uXG4gKiBFbnRyeSBwb2ludCBmb3IgYWxsIHB1YmxpYyBBUElzIG9mIHRoaXMgcGFja2FnZS5cbiAqL1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvdGVzdGluZyc7XG4iXX0=","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http/testing package.\n */\nexport { MockConnection, MockBackend } from './public_api';\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9odHRwL3Rlc3RpbmcvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQWNBLDRDQUFjLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBAbW9kdWxlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVudHJ5IHBvaW50IGZvciBhbGwgcHVibGljIEFQSXMgb2YgdGhlIGh0dHAvdGVzdGluZyBwYWNrYWdlLlxuICovXG5cbmV4cG9ydCAqIGZyb20gJy4vcHVibGljX2FwaSc7XG4iXX0=","/**\n * Generated bundle index. Do not edit.\n */\nexport * from './index';\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2h0dHAvdGVzdGluZy90ZXN0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBRUgsY0FBYyxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxuICovXG5cbmV4cG9ydCAqIGZyb20gJy4vaW5kZXgnO1xuIl19"],"names":[],"mappings":"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"}