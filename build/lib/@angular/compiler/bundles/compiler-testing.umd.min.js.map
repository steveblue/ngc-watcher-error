{"version":3,"sources":["packages/compiler/compiler-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","npm_package","tslib","ng","compiler","this","tslib_1","MockResourceLoader","_super","_this","apply","arguments","_expectations","_definitions","Map","_requests","__extends","prototype","get","url","request","_PendingRequest","push","getPromise","hasPendingRequests","length","expect","response","expectation","_Expectation","when","set","flush","Error","_processRequest","shift","verifyNoOutstandingExpectations","urls","i","join","remove","list","el","index","indexOf","splice","complete","has","ResourceLoader","promise","Promise","res","rej","resolve","reject","MockSchemaRegistry","existingProperties","attrPropMapping","existingElements","invalidProperties","invalidAttributes","hasProperty","tagName","property","schemas","value","hasElement","schemaMetas","toLowerCase","allKnownElementNames","Object","keys","securityContext","selector","isAttribute","core","SecurityContext","NONE","getMappedPropName","attrName","getDefaultComponentElementName","validateProperty","name","error","msg","validateAttribute","normalizeAnimationStyleProperty","propName","normalizeAnimationStyleValue","camelCaseProp","userProvidedProp","val","toString","MockDirectiveResolver","reflector","call","_directives","type","throwIfNotFound","setDirective","metadata","DirectiveResolver","MockNgModuleResolver","_ngModules","setNgModule","NgModuleResolver","MockPipeResolver","refector","_pipes","setPipe","PipeResolver","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.0.0-rc.1\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/compiler')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', 'tslib', '@angular/compiler'], factory) :\n\t(factory((global.npm_package = {}),global.tslib,global.ng.compiler));\n}(this, (function (exports,tslib_1,compiler) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mock implementation of {@link ResourceLoader} that allows outgoing requests to be mocked\n * and responded to within a single test, without going to the network.\n */\nvar MockResourceLoader = /** @class */ (function (_super) {\n    tslib_1.__extends(MockResourceLoader, _super);\n    function MockResourceLoader() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._expectations = [];\n        _this._definitions = new Map();\n        _this._requests = [];\n        return _this;\n    }\n    MockResourceLoader.prototype.get = function (url) {\n        var request = new _PendingRequest(url);\n        this._requests.push(request);\n        return request.getPromise();\n    };\n    MockResourceLoader.prototype.hasPendingRequests = function () { return !!this._requests.length; };\n    /**\n     * Add an expectation for the given URL. Incoming requests will be checked against\n     * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n     * can be used to check if any expectations have not yet been met.\n     *\n     * The response given will be returned if the expectation matches.\n     */\n    /**\n       * Add an expectation for the given URL. Incoming requests will be checked against\n       * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n       * can be used to check if any expectations have not yet been met.\n       *\n       * The response given will be returned if the expectation matches.\n       */\n    MockResourceLoader.prototype.expect = /**\n       * Add an expectation for the given URL. Incoming requests will be checked against\n       * the next expectation (in FIFO order). The `verifyNoOutstandingExpectations` method\n       * can be used to check if any expectations have not yet been met.\n       *\n       * The response given will be returned if the expectation matches.\n       */\n    function (url, response) {\n        var expectation = new _Expectation(url, response);\n        this._expectations.push(expectation);\n    };\n    /**\n     * Add a definition for the given URL to return the given response. Unlike expectations,\n     * definitions have no order and will satisfy any matching request at any time. Also\n     * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n     * to return an error.\n     */\n    /**\n       * Add a definition for the given URL to return the given response. Unlike expectations,\n       * definitions have no order and will satisfy any matching request at any time. Also\n       * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n       * to return an error.\n       */\n    MockResourceLoader.prototype.when = /**\n       * Add a definition for the given URL to return the given response. Unlike expectations,\n       * definitions have no order and will satisfy any matching request at any time. Also\n       * unlike expectations, unused definitions do not cause `verifyNoOutstandingExpectations`\n       * to return an error.\n       */\n    function (url, response) { this._definitions.set(url, response); };\n    /**\n     * Process pending requests and verify there are no outstanding expectations. Also fails\n     * if no requests are pending.\n     */\n    /**\n       * Process pending requests and verify there are no outstanding expectations. Also fails\n       * if no requests are pending.\n       */\n    MockResourceLoader.prototype.flush = /**\n       * Process pending requests and verify there are no outstanding expectations. Also fails\n       * if no requests are pending.\n       */\n    function () {\n        if (this._requests.length === 0) {\n            throw new Error('No pending requests to flush');\n        }\n        do {\n            this._processRequest((this._requests.shift()));\n        } while (this._requests.length > 0);\n        this.verifyNoOutstandingExpectations();\n    };\n    /**\n     * Throw an exception if any expectations have not been satisfied.\n     */\n    /**\n       * Throw an exception if any expectations have not been satisfied.\n       */\n    MockResourceLoader.prototype.verifyNoOutstandingExpectations = /**\n       * Throw an exception if any expectations have not been satisfied.\n       */\n    function () {\n        if (this._expectations.length === 0)\n            return;\n        var urls = [];\n        for (var i = 0; i < this._expectations.length; i++) {\n            var expectation = this._expectations[i];\n            urls.push(expectation.url);\n        }\n        throw new Error(\"Unsatisfied requests: \" + urls.join(', '));\n    };\n    MockResourceLoader.prototype._processRequest = function (request) {\n        var url = request.url;\n        if (this._expectations.length > 0) {\n            var expectation = this._expectations[0];\n            if (expectation.url == url) {\n                remove(this._expectations, expectation);\n                request.complete(expectation.response);\n                return;\n            }\n        }\n        if (this._definitions.has(url)) {\n            var response = this._definitions.get(url);\n            request.complete(response == null ? null : response);\n            return;\n        }\n        throw new Error(\"Unexpected request \" + url);\n    };\n    return MockResourceLoader;\n}(compiler.ResourceLoader));\nvar _PendingRequest = /** @class */ (function () {\n    function _PendingRequest(url) {\n        var _this = this;\n        this.url = url;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    _PendingRequest.prototype.complete = function (response) {\n        if (response == null) {\n            this.reject(\"Failed to load \" + this.url);\n        }\n        else {\n            this.resolve(response);\n        }\n    };\n    _PendingRequest.prototype.getPromise = function () { return this.promise; };\n    return _PendingRequest;\n}());\nvar _Expectation = /** @class */ (function () {\n    function _Expectation(url, response) {\n        this.url = url;\n        this.response = response;\n    }\n    return _Expectation;\n}());\nfunction remove(list, el) {\n    var index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockSchemaRegistry = /** @class */ (function () {\n    function MockSchemaRegistry(existingProperties, attrPropMapping, existingElements, invalidProperties, invalidAttributes) {\n        this.existingProperties = existingProperties;\n        this.attrPropMapping = attrPropMapping;\n        this.existingElements = existingElements;\n        this.invalidProperties = invalidProperties;\n        this.invalidAttributes = invalidAttributes;\n    }\n    MockSchemaRegistry.prototype.hasProperty = function (tagName, property, schemas) {\n        var value = this.existingProperties[property];\n        return value === void 0 ? true : value;\n    };\n    MockSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {\n        var value = this.existingElements[tagName.toLowerCase()];\n        return value === void 0 ? true : value;\n    };\n    MockSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this.existingElements); };\n    MockSchemaRegistry.prototype.securityContext = function (selector, property, isAttribute) {\n        return compiler.core.SecurityContext.NONE;\n    };\n    MockSchemaRegistry.prototype.getMappedPropName = function (attrName) { return this.attrPropMapping[attrName] || attrName; };\n    MockSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };\n    MockSchemaRegistry.prototype.validateProperty = function (name) {\n        if (this.invalidProperties.indexOf(name) > -1) {\n            return { error: true, msg: \"Binding to property '\" + name + \"' is disallowed for security reasons\" };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    MockSchemaRegistry.prototype.validateAttribute = function (name) {\n        if (this.invalidAttributes.indexOf(name) > -1) {\n            return {\n                error: true,\n                msg: \"Binding to attribute '\" + name + \"' is disallowed for security reasons\"\n            };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    MockSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { return propName; };\n    MockSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {\n        return { error: (null), value: val.toString() };\n    };\n    return MockSchemaRegistry;\n}());\n\n/**\n * An implementation of {@link DirectiveResolver} that allows overriding\n * various properties of directives.\n */\nvar MockDirectiveResolver = /** @class */ (function (_super) {\n    tslib_1.__extends(MockDirectiveResolver, _super);\n    function MockDirectiveResolver(reflector) {\n        var _this = _super.call(this, reflector) || this;\n        _this._directives = new Map();\n        return _this;\n    }\n    MockDirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        return this._directives.get(type) || _super.prototype.resolve.call(this, type, throwIfNotFound);\n    };\n    /**\n     * Overrides the {@link core.Directive} for a directive.\n     */\n    /**\n       * Overrides the {@link core.Directive} for a directive.\n       */\n    MockDirectiveResolver.prototype.setDirective = /**\n       * Overrides the {@link core.Directive} for a directive.\n       */\n    function (type, metadata) {\n        this._directives.set(type, metadata);\n    };\n    return MockDirectiveResolver;\n}(compiler.DirectiveResolver));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockNgModuleResolver = /** @class */ (function (_super) {\n    tslib_1.__extends(MockNgModuleResolver, _super);\n    function MockNgModuleResolver(reflector) {\n        var _this = _super.call(this, reflector) || this;\n        _this._ngModules = new Map();\n        return _this;\n    }\n    /**\n     * Overrides the {@link NgModule} for a module.\n     */\n    /**\n       * Overrides the {@link NgModule} for a module.\n       */\n    MockNgModuleResolver.prototype.setNgModule = /**\n       * Overrides the {@link NgModule} for a module.\n       */\n    function (type, metadata) {\n        this._ngModules.set(type, metadata);\n    };\n    /**\n     * Returns the {@link NgModule} for a module:\n     * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n     * default\n     * `NgModuleResolver`, see `setNgModule`.\n     */\n    /**\n       * Returns the {@link NgModule} for a module:\n       * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n       * default\n       * `NgModuleResolver`, see `setNgModule`.\n       */\n    MockNgModuleResolver.prototype.resolve = /**\n       * Returns the {@link NgModule} for a module:\n       * - Set the {@link NgModule} to the overridden view when it exists or fallback to the\n       * default\n       * `NgModuleResolver`, see `setNgModule`.\n       */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        return this._ngModules.get(type) || (_super.prototype.resolve.call(this, type, throwIfNotFound));\n    };\n    return MockNgModuleResolver;\n}(compiler.NgModuleResolver));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MockPipeResolver = /** @class */ (function (_super) {\n    tslib_1.__extends(MockPipeResolver, _super);\n    function MockPipeResolver(refector) {\n        var _this = _super.call(this, refector) || this;\n        _this._pipes = new Map();\n        return _this;\n    }\n    /**\n     * Overrides the {@link Pipe} for a pipe.\n     */\n    /**\n       * Overrides the {@link Pipe} for a pipe.\n       */\n    MockPipeResolver.prototype.setPipe = /**\n       * Overrides the {@link Pipe} for a pipe.\n       */\n    function (type, metadata) { this._pipes.set(type, metadata); };\n    /**\n     * Returns the {@link Pipe} for a pipe:\n     * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n     * default\n     * `PipeResolver`, see `setPipe`.\n     */\n    /**\n       * Returns the {@link Pipe} for a pipe:\n       * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n       * default\n       * `PipeResolver`, see `setPipe`.\n       */\n    MockPipeResolver.prototype.resolve = /**\n       * Returns the {@link Pipe} for a pipe:\n       * - Set the {@link Pipe} to the overridden view when it exists or fallback to the\n       * default\n       * `PipeResolver`, see `setPipe`.\n       */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var metadata = this._pipes.get(type);\n        if (!metadata) {\n            metadata = (_super.prototype.resolve.call(this, type, throwIfNotFound));\n        }\n        return metadata;\n    };\n    return MockPipeResolver;\n}(compiler.PipeResolver));\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.MockResourceLoader = MockResourceLoader;\nexports.MockSchemaRegistry = MockSchemaRegistry;\nexports.MockDirectiveResolver = MockDirectiveResolver;\nexports.MockNgModuleResolver = MockNgModuleResolver;\nexports.MockPipeResolver = MockPipeResolver;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=compiler-testing.umd.js.map\n"]}